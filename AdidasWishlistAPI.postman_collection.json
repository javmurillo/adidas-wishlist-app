{
	"info": {
		"_postman_id": "5f61235c-0e34-6174-1bc4-a4485cec4492",
		"name": "FortniteChests API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Test full User and Admin story",
			"description": "",
			"item": [
				{
					"name": "/api/user/authenticate (Admin auth)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b2fab8e2-4bb1-474a-9019-bd1187054d2b",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Success field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"});",
									"",
									"pm.test(\"User logged message\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"User logged in succesfully!\");",
									"});",
									"",
									"",
									"pm.test(\"Successful Token\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('token');",
									"    //TOKEN GENERATED IN ORDER TO LOGIN AUTOMATICALLY",
									"    pm.globals.set(\"admin.jwt\", jsonData.token);",
									"});",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "admin",
									"description": "",
									"type": "text"
								},
								{
									"key": "password",
									"value": "k28ok77",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/api/user/authenticate",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"user",
								"authenticate"
							]
						},
						"description": "The admin user authenticates successfully"
					},
					"response": []
				},
				{
					"name": "/api/users (Array length == 1)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "66c0f101-a773-473b-b056-69dfb05a0e71",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Array length is equal to 1\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(1)",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-access-token",
								"value": "{{admin.jwt}}"
							}
						],
						"body": {},
						"url": {
							"raw": "{{url}}/api/users",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"users"
							]
						},
						"description": "Checks the array length is equal to 1 (admin user)"
					},
					"response": []
				},
				{
					"name": "/api/user/register (Registers the test user)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "16537108-d66e-498c-95e0-cff3e2323876",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Successful message\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"Register succesful! Please check your email for activation link!\");",
									"});",
									"",
									"pm.test(\"Verification Hash exists\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('hash');",
									"    pm.globals.set(\"TestUsername.verifHash\", jsonData.hash);",
									"});",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "TestUsername",
									"description": "",
									"type": "text"
								},
								{
									"key": "email",
									"value": "testemail@fortnitechests.info",
									"description": "",
									"type": "text"
								},
								{
									"key": "password",
									"value": "123123",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/api/user/register",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"user",
								"register"
							]
						},
						"description": "Creates an user given his username, email, password, and IP"
					},
					"response": []
				},
				{
					"name": "/api/user/register (Duplicated username)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "af42468e-e52d-4bdc-a9b9-230dd95001c0",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Username already exists message\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"Username already exists!\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "TestUsername",
									"description": "",
									"type": "text"
								},
								{
									"key": "email",
									"value": "testemail2@fortnitechests.info",
									"description": "",
									"type": "text"
								},
								{
									"key": "password",
									"value": "123123",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/api/user/register",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"user",
								"register"
							]
						},
						"description": "Tries to register a new user with duplicated username"
					},
					"response": []
				},
				{
					"name": "/api/user/register (Duplicated email)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e58567c3-d80f-48c3-ab28-0696bdf8f661",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Email already exists message\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"Email already exists!\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "TestUsername2",
									"description": "",
									"type": "text"
								},
								{
									"key": "email",
									"value": "testemail@fortnitechests.info",
									"description": "",
									"type": "text"
								},
								{
									"key": "password",
									"value": "123123",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/api/user/register",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"user",
								"register"
							]
						},
						"description": "Tries to register a new user with duplicated email"
					},
					"response": []
				},
				{
					"name": "/api/users (Array length == 2)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "df2ed7d6-1ac8-41a2-90f7-434b75f114f6",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Array length is equal to 2\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(2)",
									"    pm.globals.set(\"TestUsername.id\", jsonData[1]._id);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-access-token",
								"value": "{{admin.jwt}}"
							}
						],
						"body": {},
						"url": {
							"raw": "{{url}}/api/users",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"users"
							]
						},
						"description": "Checks the array length is equal to 2 (admin and test users)"
					},
					"response": []
				},
				{
					"name": "/api/user/authenticate (User can't auth)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2301dd8e-07b3-44b4-b74b-b31e4dfa0b87",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Username or password does not match message\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"Username or password does not match!\");",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "TestUsername",
									"description": "",
									"type": "text"
								},
								{
									"key": "password",
									"value": "123123",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/api/user/authenticate",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"user",
								"authenticate"
							]
						},
						"description": "Test user cannot auth since his account is not verified"
					},
					"response": []
				},
				{
					"name": "/api/user/verify (Verifies the account with the token)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "10b5b094-08a0-4832-82c5-312b9e50261f",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Your account is now verified message\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"Your account is now verified!\");",
									"});",
									"",
									"pm.test(\"Successful Token\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('token');",
									"    //TOKEN GENERATED IN ORDER TO LOGIN AUTOMATICALLY",
									"    pm.globals.set(\"TestUsername.jwt\", jsonData.token);",
									"});",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "token",
									"value": "{{TestUsername.verifHash}}",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/api/user/verify",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"user",
								"verify"
							]
						},
						"description": "The test user account is verified given the token generated when registers"
					},
					"response": []
				},
				{
					"name": "/api/log (2 users)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "41bba8aa-97f7-402f-9d68-83cfa2af6993",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Log fields exist\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('new');",
									"    pm.expect(jsonData.new).to.be.true;",
									"    pm.expect(jsonData).to.have.property('log');",
									"    pm.expect(jsonData.log).to.have.property('date');",
									"    pm.expect(jsonData.log).to.have.property('_id');",
									"    pm.expect(jsonData.log).to.have.property('users');",
									"    pm.expect(jsonData.log).to.have.property('loot');",
									"    pm.expect(jsonData.log).to.have.property('ammo');",
									"    pm.expect(jsonData.log).to.have.property('vmachine');",
									"    pm.expect(jsonData.log.users).to.eql(2);",
									"    pm.expect(jsonData.log.loot).to.eql(0);",
									"    pm.expect(jsonData.log.ammo).to.eql(0);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-access-token",
								"value": "{{admin.jwt}}"
							}
						],
						"body": {},
						"url": {
							"raw": "{{url}}/api/log",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"log"
							]
						},
						"description": "Retruns the sessions"
					},
					"response": []
				},
				{
					"name": "/api/user/verify (Token already used)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9fe9a4b1-6754-49f1-990a-2fdb4657c4a7",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Verification token is invalid message\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"Verification token is invalid or has expired!\");",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "token",
									"value": "{{TestUsername.verifHash}}",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/api/user/verify",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"user",
								"verify"
							]
						},
						"description": "The user tries to verify the account again but the token is already used"
					},
					"response": []
				},
				{
					"name": "/api/screenshot (Posts a screenshot)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "09c8147f-7f1f-4053-992d-7d5fb1c4d949",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Screenshot fields exists\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.author).to.eql(pm.globals.get(\"TestUsername.id\"));",
									"    pm.expect(jsonData).to.have.property('_id');",
									"    pm.globals.set(\"Screenshot1.id\", jsonData._id);",
									"    pm.expect(jsonData).to.have.property('date');",
									"    pm.expect(jsonData).to.have.property('url');",
									"    pm.expect(jsonData).to.have.property(\"status\");",
									"    pm.expect(jsonData.status).to.eql(\"pending\");",
									"});",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-access-token",
								"value": "{{TestUsername.jwt}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"description": "",
									"type": "file"
								},
								{
									"key": "username",
									"value": "TestUsername",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/api/screenshot",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"screenshot"
							]
						},
						"description": "The test user tries to post a screenshot with the token given by verifying the account"
					},
					"response": []
				},
				{
					"name": "/api/user/authenticate (User auth)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0317c437-9395-49db-8ace-e523fd2be948",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Success field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"});",
									"",
									"pm.test(\"User logged message\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"User logged in succesfully!\");",
									"});",
									"",
									"",
									"pm.test(\"Successful Token\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('token');",
									"    //TOKEN GENERATED IN ORDER TO LOGIN AUTOMATICALLY",
									"    pm.globals.set(\"TestUsername.jwt\", jsonData.token);",
									"});",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "TestUsername",
									"description": "",
									"type": "text"
								},
								{
									"key": "password",
									"value": "123123",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/api/user/authenticate",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"user",
								"authenticate"
							]
						},
						"description": "The test user authenticates in order to generate a new token"
					},
					"response": []
				},
				{
					"name": "/api/screenshot (Posts a screenshot)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f772590c-e52e-4973-9482-e8e6e6639670",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Screenshot fields exists\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.author).to.eql(pm.globals.get(\"TestUsername.id\"));",
									"    pm.expect(jsonData).to.have.property('_id');",
									"    pm.globals.set(\"Screenshot2.id\", jsonData._id);",
									"    pm.expect(jsonData).to.have.property('date');",
									"    pm.expect(jsonData).to.have.property('url');",
									"    pm.expect(jsonData).to.have.property(\"status\");",
									"    pm.expect(jsonData.status).to.eql(\"pending\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-access-token",
								"value": "{{TestUsername.jwt}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"value": "",
									"description": "",
									"type": "file"
								},
								{
									"key": "username",
									"value": "TestUsername",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/api/screenshot",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"screenshot"
							]
						},
						"description": "The test user tries to post a screenshot with the token given by authentifying"
					},
					"response": []
				},
				{
					"name": "/api/user/recovery (Generates a reset password token)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3358bc23-2419-4aa3-89e2-859f7ea2480c",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Request received message\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"Request received succesfully! Please check your email for recover your password!\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "testemail@fortnitechests.info",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/api/user/recovery",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"user",
								"recovery"
							]
						},
						"description": "The test user sends a password reset request and the password reset fields are generated"
					},
					"response": []
				},
				{
					"name": "/api/users (resetPassword fields exist)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "97064ef3-4f82-4385-a264-4882ee075225",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Reset password fields exist\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[1]).to.have.property('resetPasswordToken');",
									"    pm.expect(jsonData[1]).to.have.property('resetPasswordExpires');",
									"    pm.globals.set(\"TestUsername.resethash\", jsonData[1].resetPasswordToken);",
									"});",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-access-token",
								"value": "{{admin.jwt}}"
							}
						],
						"body": {},
						"url": {
							"raw": "{{url}}/api/users",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"users"
							]
						},
						"description": "Checks the password reset fields exist"
					},
					"response": []
				},
				{
					"name": "/api/user/reset (Test user sets new password)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cf0f918c-3cd4-4dad-ab43-b5cae45235b1",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Password has been reset message\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"Your password has been reset successfully!\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "token",
									"value": "{{TestUsername.resethash}}",
									"description": "",
									"type": "text"
								},
								{
									"key": "newPassword",
									"value": "1231231",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/api/user/reset",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"user",
								"reset"
							]
						},
						"description": "The test user sets a new password with the token generated by sending the password reset request"
					},
					"response": []
				},
				{
					"name": "/api/user/reset (Token already used)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5bbf8179-6508-4e5e-8252-ad05d4fcc306",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Password has been reset message\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"Password reset token is invalid or has expired!\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "token",
									"value": "{{TestUsername.resethash}}",
									"description": "",
									"type": "text"
								},
								{
									"key": "newPassword",
									"value": "1231231",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/api/user/reset",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"user",
								"reset"
							]
						},
						"description": "The test user tries to reset the password again but the token does not exist"
					},
					"response": []
				},
				{
					"name": "/api/users (resetPassword fields do not exist)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d7d0455b-047c-4e1a-8718-0a8473381326",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Reset password fields do not exist\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[1]).to.not.have.property('resetPasswordToken');",
									"    pm.expect(jsonData[1]).to.not.have.property('resetPasswordExpires');",
									"});",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-access-token",
								"value": "{{admin.jwt}}"
							}
						],
						"body": {},
						"url": {
							"raw": "{{url}}/api/users",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"users"
							]
						},
						"description": "Checks the password reset fields doe not exist"
					},
					"response": []
				},
				{
					"name": "/api/user/authenticate (User auth with old password error)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9fe63137-4b87-4649-a63a-88b93314c7c2",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Username or password does not match message\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"Username or password does not match!\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "TestUsername",
									"description": "",
									"type": "text"
								},
								{
									"key": "password",
									"value": "123123",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/api/user/authenticate",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"user",
								"authenticate"
							]
						},
						"description": "The test user tries to authenticate with the old password and fails"
					},
					"response": []
				},
				{
					"name": "/api/user/authenticate (User auth with new password)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "023dc04a-c4a0-4324-9f6b-352edc43bbfc",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Success field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"});",
									"",
									"pm.test(\"User logged message\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"User logged in succesfully!\");",
									"});",
									"",
									"",
									"pm.test(\"Successful Token\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('token');",
									"    //TOKEN GENERATED IN ORDER TO LOGIN AUTOMATICALLY",
									"    pm.globals.set(\"TestUsername.jwt\", jsonData.token);",
									"});",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "TestUsername",
									"description": "",
									"type": "text"
								},
								{
									"key": "password",
									"value": "1231231",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/api/user/authenticate",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"user",
								"authenticate"
							]
						},
						"description": "The test user authenticates with the new password successfully"
					},
					"response": []
				},
				{
					"name": "/api/user/block (Blocks the user)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f8008f9e-0440-4836-b6e9-c957ba193593",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Blocked field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.user.role).to.eql(\"blocked\");",
									"});",
									"",
									"pm.test(\"User blocked message\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"User blocked successfully!\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "x-access-token",
								"value": "{{admin.jwt}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "id",
									"value": "{{TestUsername.id}}",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/api/user/block",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"user",
								"block"
							]
						},
						"description": "Blocks the user"
					},
					"response": []
				},
				{
					"name": "/api/user/authenticate (User can't auth)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9c542f8a-f1a5-4126-8702-ad1f1e773b14",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Account blocked message\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"Your account has been blocked!\");",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "TestUsername",
									"description": "",
									"type": "text"
								},
								{
									"key": "password",
									"value": "1231231",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/api/user/authenticate",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"user",
								"authenticate"
							]
						},
						"description": "Test user cannot auth since his account is blocked"
					},
					"response": []
				},
				{
					"name": "/api/user/unblock (Unblocks the user)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "43a52e9f-33d3-4990-943e-37ae6dcae84f",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Blocked field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.user.role).to.eql(\"user\");",
									"});",
									"",
									"pm.test(\"User unblocked message\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"User unblocked successfully!\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "x-access-token",
								"value": "{{admin.jwt}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "id",
									"value": "{{TestUsername.id}}",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/api/user/unblock",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"user",
								"unblock"
							]
						},
						"description": "Unblocks the user"
					},
					"response": []
				},
				{
					"name": "/api/user/authenticate (User auth)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0317c437-9395-49db-8ace-e523fd2be948",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Success field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"});",
									"",
									"pm.test(\"User logged message\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"User logged in succesfully!\");",
									"});",
									"",
									"",
									"pm.test(\"Successful Token\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('token');",
									"    //TOKEN GENERATED IN ORDER TO LOGIN AUTOMATICALLY",
									"    pm.globals.set(\"TestUsername.jwt\", jsonData.token);",
									"});",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "TestUsername",
									"description": "",
									"type": "text"
								},
								{
									"key": "password",
									"value": "1231231",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/api/user/authenticate",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"user",
								"authenticate"
							]
						},
						"description": "The test user authenticates in order to generate a new token"
					},
					"response": []
				},
				{
					"name": "/api/user/register (Registers the second test user)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "47d20cfd-6def-4f48-8cdb-4b7e36dda0fc",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Successful message\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"Register succesful! Please check your email for activation link!\");",
									"});",
									"",
									"pm.test(\"Verification Hash exists\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('hash');",
									"    pm.globals.set(\"TestUsername2.verifHash\", jsonData.hash);",
									"});",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "TestUsername2",
									"description": "",
									"type": "text"
								},
								{
									"key": "email",
									"value": "testemail2@fortnitechests.info",
									"description": "",
									"type": "text"
								},
								{
									"key": "password",
									"value": "123123",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/api/user/register",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"user",
								"register"
							]
						},
						"description": "Creates an user given his username, email, password, and IP"
					},
					"response": []
				},
				{
					"name": "/api/user/verify (Verifies the account with the token)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a3c5f8b2-bf7c-4ea6-b9e8-7c327df78ca2",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Your account is now verified message\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"Your account is now verified!\");",
									"});",
									"",
									"pm.test(\"Successful Token\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('token');",
									"    //TOKEN GENERATED IN ORDER TO LOGIN AUTOMATICALLY",
									"    pm.globals.set(\"TestUsername2.jwt\", jsonData.token);",
									"});",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "token",
									"value": "{{TestUsername2.verifHash}}",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/api/user/verify",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"user",
								"verify"
							]
						},
						"description": "The test user account is verified given the token generated when registers"
					},
					"response": []
				},
				{
					"name": "/api/log (3 users)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "258a039f-9b31-4308-b0aa-e14b903f6b7b",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Log fields exist\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('new');",
									"    pm.expect(jsonData.new).to.be.false;",
									"    pm.expect(jsonData).to.have.property('log');",
									"    pm.expect(jsonData.log).to.have.property('date');",
									"    pm.expect(jsonData.log).to.have.property('_id');",
									"    pm.expect(jsonData.log).to.have.property('users');",
									"    pm.expect(jsonData.log).to.have.property('loot');",
									"    pm.expect(jsonData.log).to.have.property('ammo');",
									"    pm.expect(jsonData.log).to.have.property('vmachine');",
									"    pm.expect(jsonData.log.users).to.eql(3);",
									"    pm.expect(jsonData.log.loot).to.eql(0);",
									"    pm.expect(jsonData.log.ammo).to.eql(0);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-access-token",
								"value": "{{admin.jwt}}"
							}
						],
						"body": {},
						"url": {
							"raw": "{{url}}/api/log",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"log"
							]
						},
						"description": "Retruns the sessions"
					},
					"response": []
				},
				{
					"name": "/api/users (Array length == 3)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3a513359-3a49-4c66-aced-4bd298a93aac",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Array length is equal to 3\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(3)",
									"    pm.globals.set(\"TestUsername2.id\", jsonData[2]._id);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-access-token",
								"value": "{{admin.jwt}}"
							}
						],
						"body": {},
						"url": {
							"raw": "{{url}}/api/users",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"users"
							]
						},
						"description": "Checks the array length is equal to 3 (admin and test users)"
					},
					"response": []
				},
				{
					"name": "/api/screenshot (Posts a screenshot)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f08ee5bd-111a-4982-967d-5db03b38324c",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Screenshot fields exists\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.author).to.eql(pm.globals.get(\"TestUsername2.id\"));",
									"    pm.expect(jsonData).to.have.property('_id');",
									"    pm.globals.set(\"Screenshot3.id\", jsonData._id);",
									"    pm.expect(jsonData).to.have.property('date');",
									"    pm.expect(jsonData).to.have.property('url');",
									"    pm.expect(jsonData).to.have.property(\"status\");",
									"    pm.expect(jsonData.status).to.eql(\"pending\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-access-token",
								"value": "{{TestUsername2.jwt}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"description": "",
									"type": "file"
								},
								{
									"key": "username",
									"value": "TestUsername2",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/api/screenshot",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"screenshot"
							]
						},
						"description": "The test user tries to post a screenshot with the token given by authentifying"
					},
					"response": []
				},
				{
					"name": "/api/user/info/:id (User information)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fc004858-0091-4a9f-b131-7c8384a1e773",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"User fields exist and have two screenshots\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('username');",
									"    pm.expect(jsonData).to.have.property('email');",
									"    pm.expect(jsonData).to.have.property('role');",
									"    pm.expect(jsonData).to.have.property('creationTime');",
									"    pm.expect(jsonData).to.have.property('screenshots');",
									"    pm.expect(jsonData.screenshots.length).to.eql(2)",
									"    pm.expect(jsonData).to.not.have.property('passwrd');",
									"});",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-access-token",
								"value": "{{admin.jwt}}"
							}
						],
						"body": {},
						"url": {
							"raw": "{{url}}/api/user/info/{{TestUsername.id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"user",
								"info",
								"{{TestUsername.id}}"
							]
						},
						"description": "Returns the user information excluding password"
					},
					"response": []
				},
				{
					"name": "/api/users/stats (Users statistics)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4fce5231-c8c2-4a86-b803-9781aaa21a14",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Stats fields exist\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('_id');",
									"    pm.expect(jsonData[0]._id).to.have.property('year');",
									"    pm.expect(jsonData[0]).to.have.property('monthlyusage');",
									"    pm.expect(jsonData[0].monthlyusage[0]).to.have.property('month');",
									"    pm.expect(jsonData[0].monthlyusage[0]).to.have.property('dailyusage');",
									"    pm.expect(jsonData[0].monthlyusage[0].dailyusage[0]).to.have.property('day');",
									"    pm.expect(jsonData[0].monthlyusage[0].dailyusage[0]).to.have.property('registers');",
									"    pm.expect(jsonData[0].monthlyusage[0].dailyusage[0].registers).to.eql(3);",
									"});",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-access-token",
								"value": "{{admin.jwt}}"
							}
						],
						"body": {},
						"url": {
							"raw": "{{url}}/api/users/stats",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"users",
								"stats"
							]
						},
						"description": "Returns the users stats"
					},
					"response": []
				},
				{
					"name": "/api/screenshots/pending (Pending screenshots)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d0a9080e-c5b7-481b-b5e2-290e0d2054a6",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Array length is equal to 3\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(3)",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-access-token",
								"value": "{{admin.jwt}}"
							}
						],
						"body": {},
						"url": {
							"raw": "{{url}}/api/screenshots/pending",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"screenshots",
								"pending"
							]
						},
						"description": "Returns the pending screenshots"
					},
					"response": []
				},
				{
					"name": "/api/marker (Creates the first loot marker)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "eb24fe38-1268-43b5-b0e0-03b5a815db11",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Marker fields exist\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('coordinates');",
									"    pm.expect(jsonData.coordinates[0]).to.eql(100);",
									"    pm.expect(jsonData.coordinates[1]).to.eql(200);",
									"    pm.expect(jsonData).to.have.property('date');",
									"    pm.expect(jsonData).to.have.property('screenshot');",
									"    pm.expect(jsonData.screenshot.length).to.eql(0);",
									"    pm.expect(jsonData).to.have.property('clicks');",
									"    pm.expect(jsonData).to.have.property('reports');",
									"    pm.expect(jsonData).to.have.property('_id');",
									"    pm.expect(jsonData).to.have.property('type');",
									"    pm.expect(jsonData.type).to.eql('loot');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "x-access-token",
								"value": "{{admin.jwt}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "long",
									"value": "100",
									"description": "",
									"type": "text"
								},
								{
									"key": "lat",
									"value": "200",
									"description": "",
									"type": "text"
								},
								{
									"key": "type",
									"value": "loot",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/api/marker",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"marker"
							]
						},
						"description": "Creates a new marker given long, lat, and type"
					},
					"response": []
				},
				{
					"name": "/api/log (3 users 1 loot)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3b922bcd-973f-4361-ae94-eaa4d3545951",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Log fields exist\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('new');",
									"    pm.expect(jsonData.new).to.be.false;",
									"    pm.expect(jsonData).to.have.property('log');",
									"    pm.expect(jsonData.log).to.have.property('date');",
									"    pm.expect(jsonData.log).to.have.property('_id');",
									"    pm.expect(jsonData.log).to.have.property('users');",
									"    pm.expect(jsonData.log).to.have.property('loot');",
									"    pm.expect(jsonData.log).to.have.property('ammo');",
									"    pm.expect(jsonData.log).to.have.property('vmachine');",
									"    pm.expect(jsonData.log.users).to.eql(3);",
									"    pm.expect(jsonData.log.loot).to.eql(1);",
									"    pm.expect(jsonData.log.ammo).to.eql(0);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-access-token",
								"value": "{{admin.jwt}}"
							}
						],
						"body": {},
						"url": {
							"raw": "{{url}}/api/log",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"log"
							]
						},
						"description": "Retruns the sessions"
					},
					"response": []
				},
				{
					"name": "/api/marker/screenshot/:id (1st screenshot - new)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0d9703eb-7699-4d90-bfe6-3ca5721a3dcb",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Marker fields exist\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('coordinates');",
									"    pm.expect(jsonData.coordinates[0]).to.eql(100);",
									"    pm.expect(jsonData.coordinates[1]).to.eql(200);",
									"    pm.expect(jsonData).to.have.property('date');",
									"    pm.expect(jsonData).to.have.property('screenshot');",
									"    pm.expect(jsonData.screenshot.length).to.eql(1);",
									"    pm.expect(jsonData.screenshot[0]).to.eql(pm.globals.get(\"Screenshot1.id\"));",
									"    pm.expect(jsonData).to.have.property('clicks');",
									"    pm.expect(jsonData).to.have.property('reports');",
									"    pm.expect(jsonData).to.have.property('_id');",
									"    pm.expect(jsonData).to.have.property('type');",
									"    pm.expect(jsonData.type).to.eql('loot');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "x-access-token",
								"value": "{{admin.jwt}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "long",
									"value": "100",
									"description": "",
									"type": "text"
								},
								{
									"key": "lat",
									"value": "200",
									"description": "",
									"type": "text"
								},
								{
									"key": "status",
									"value": "new",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/api/marker/screenshot/{{Screenshot1.id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"marker",
								"screenshot",
								"{{Screenshot1.id}}"
							]
						},
						"description": "Attaches the screenshot with the given id to the given marker"
					},
					"response": []
				},
				{
					"name": "/api/marker/screenshot/:id (2nd screenshot - duplicate)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "563f1fc5-5b0a-4e7e-8caa-f8fdaeca8e1f",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Marker fields exist\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('coordinates');",
									"    pm.expect(jsonData.coordinates[0]).to.eql(100);",
									"    pm.expect(jsonData.coordinates[1]).to.eql(200);",
									"    pm.expect(jsonData).to.have.property('date');",
									"    pm.expect(jsonData).to.have.property('screenshot');",
									"    pm.expect(jsonData.screenshot.length).to.eql(2);",
									"    pm.expect(jsonData.screenshot[1]).to.eql(pm.globals.get(\"Screenshot2.id\"));",
									"    pm.expect(jsonData).to.have.property('clicks');",
									"    pm.expect(jsonData).to.have.property('reports');",
									"    pm.expect(jsonData).to.have.property('_id');",
									"    pm.expect(jsonData).to.have.property('type');",
									"    pm.expect(jsonData.type).to.eql('loot');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "x-access-token",
								"value": "{{admin.jwt}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "long",
									"value": "100",
									"description": "",
									"type": "text"
								},
								{
									"key": "lat",
									"value": "200",
									"description": "",
									"type": "text"
								},
								{
									"key": "status",
									"value": "duplicate",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/api/marker/screenshot/{{Screenshot2.id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"marker",
								"screenshot",
								"{{Screenshot2.id}}"
							]
						},
						"description": "Attaches the screenshot with the given id to the given marker"
					},
					"response": []
				},
				{
					"name": "/api/screenshot/:id (Check 1st screenshot fields)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9000da07-c266-43de-a697-0965f25d06d1",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Screenshot fields exist\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('date');",
									"    pm.expect(jsonData).to.have.property('status');",
									"    pm.expect(jsonData.status).to.eql('new');",
									"    pm.expect(jsonData).to.have.property('_id');",
									"    pm.expect(jsonData._id).to.eql(pm.globals.get(\"Screenshot1.id\"));",
									"    pm.expect(jsonData).to.have.property('author');",
									"    pm.expect(jsonData.author).to.eql(pm.globals.get(\"TestUsername.id\"));",
									"    pm.expect(jsonData).to.have.property('url');",
									"});",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-access-token",
								"value": "{{TestUsername.jwt}}"
							}
						],
						"body": {},
						"url": {
							"raw": "{{url}}/api/screenshot/{{Screenshot1.id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"screenshot",
								"{{Screenshot1.id}}"
							]
						},
						"description": "Returns the screenshot information given his id"
					},
					"response": []
				},
				{
					"name": "/api/screenshot/:id (Check 2nd screenshot fields)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0403b67a-027d-49ec-9764-57650ab551ee",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Screenshot fields exist\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('date');",
									"    pm.expect(jsonData).to.have.property('status');",
									"    pm.expect(jsonData.status).to.eql('duplicate');",
									"    pm.expect(jsonData).to.have.property('_id');",
									"    pm.expect(jsonData._id).to.eql(pm.globals.get(\"Screenshot2.id\"));",
									"    pm.expect(jsonData).to.have.property('author');",
									"    pm.expect(jsonData.author).to.eql(pm.globals.get(\"TestUsername.id\"));",
									"    pm.expect(jsonData).to.have.property('url');",
									"});",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-access-token",
								"value": "{{TestUsername.jwt}}"
							}
						],
						"body": {},
						"url": {
							"raw": "{{url}}/api/screenshot/{{Screenshot2.id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"screenshot",
								"{{Screenshot2.id}}"
							]
						},
						"description": "Returns the screenshot information given his id"
					},
					"response": []
				},
				{
					"name": "/api/screenshot/:id (Check 3rd screenshot fields)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d75a661e-4ca7-41fd-b16f-404b760674bf",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Screenshot fields exist\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('date');",
									"    pm.expect(jsonData).to.have.property('status');",
									"    pm.expect(jsonData.status).to.eql('pending');",
									"    pm.expect(jsonData).to.have.property('_id');",
									"    pm.expect(jsonData._id).to.eql(pm.globals.get(\"Screenshot3.id\"));",
									"    pm.expect(jsonData).to.have.property('author');",
									"    pm.expect(jsonData.author).to.eql(pm.globals.get(\"TestUsername2.id\"));",
									"    pm.expect(jsonData).to.have.property('url');",
									"});",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-access-token",
								"value": "{{TestUsername2.jwt}}"
							}
						],
						"body": {},
						"url": {
							"raw": "{{url}}/api/screenshot/{{Screenshot3.id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"screenshot",
								"{{Screenshot3.id}}"
							]
						},
						"description": "Returns the screenshot information given his id"
					},
					"response": []
				},
				{
					"name": "/api/screenshots/marker/:long/:lat (Screenshots attached)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9ac28aad-cc1f-4ddc-a97f-8bbc28bff754",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Screenshot fields exist\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(2)",
									"    pm.expect(jsonData[0]).to.have.property('date');",
									"    pm.expect(jsonData[0]).to.have.property('status');",
									"    pm.expect(jsonData[0]).to.have.property('_id');",
									"    pm.expect(jsonData[0]._id).to.eql(pm.globals.get(\"Screenshot1.id\"));",
									"    pm.expect(jsonData[0]).to.have.property('author');",
									"    pm.expect(jsonData[0].author).to.eql(pm.globals.get(\"TestUsername.id\"));",
									"    pm.expect(jsonData[0]).to.have.property('url');",
									"    ",
									"    pm.expect(jsonData[1]).to.have.property('date');",
									"    pm.expect(jsonData[1]).to.have.property('status');",
									"    pm.expect(jsonData[1]).to.have.property('_id');",
									"    pm.expect(jsonData[1]._id).to.eql(pm.globals.get(\"Screenshot2.id\"));",
									"    pm.expect(jsonData[1]).to.have.property('author');",
									"    pm.expect(jsonData[1].author).to.eql(pm.globals.get(\"TestUsername.id\"));",
									"    pm.expect(jsonData[1]).to.have.property('url');",
									"});",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{url}}/api/screenshots/marker/100/200",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"screenshots",
								"marker",
								"100",
								"200"
							]
						},
						"description": "Return all the screenshots attached to the marker given his longitude and latitude"
					},
					"response": []
				},
				{
					"name": "/api/screenshots/author/:id (Author's screenshots)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d2551351-1fdb-4aac-860e-7cf41dc802e0",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Screenshot fields exist\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(2)",
									"    pm.expect(jsonData[0]).to.have.property('date');",
									"    pm.expect(jsonData[0]).to.have.property('status');",
									"    pm.expect(jsonData[0]).to.have.property('_id');",
									"    pm.expect(jsonData[0]._id).to.eql(pm.globals.get(\"Screenshot1.id\"));",
									"    pm.expect(jsonData[0]).to.have.property('author');",
									"    pm.expect(jsonData[0].author).to.eql(pm.globals.get(\"TestUsername.id\"));",
									"    pm.expect(jsonData[0]).to.have.property('url');",
									"    ",
									"    pm.expect(jsonData[1]).to.have.property('date');",
									"    pm.expect(jsonData[1]).to.have.property('status');",
									"    pm.expect(jsonData[1]).to.have.property('_id');",
									"    pm.expect(jsonData[1]._id).to.eql(pm.globals.get(\"Screenshot2.id\"));",
									"    pm.expect(jsonData[1]).to.have.property('author');",
									"    pm.expect(jsonData[1].author).to.eql(pm.globals.get(\"TestUsername.id\"));",
									"    pm.expect(jsonData[1]).to.have.property('url');",
									"});",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-access-token",
								"value": "{{TestUsername.jwt}}"
							}
						],
						"body": {},
						"url": {
							"raw": "{{url}}/api/screenshots/author/{{TestUsername.id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"screenshots",
								"author",
								"{{TestUsername.id}}"
							]
						},
						"description": "Return all the screenshots given the author's id"
					},
					"response": []
				},
				{
					"name": "/api/marker (Creates the first ammo marker)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "31dcc0ad-137a-4f27-8880-a22422702d5a",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Marker fields exist\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('coordinates');",
									"    pm.expect(jsonData.coordinates[0]).to.eql(200);",
									"    pm.expect(jsonData.coordinates[1]).to.eql(300);",
									"    pm.expect(jsonData).to.have.property('date');",
									"    pm.expect(jsonData).to.have.property('screenshot');",
									"    pm.expect(jsonData.screenshot.length).to.eql(0);",
									"    pm.expect(jsonData).to.have.property('clicks');",
									"    pm.expect(jsonData).to.have.property('reports');",
									"    pm.expect(jsonData).to.have.property('_id');",
									"    pm.expect(jsonData).to.have.property('type');",
									"    pm.expect(jsonData.type).to.eql('ammo');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "x-access-token",
								"value": "{{admin.jwt}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "long",
									"value": "200",
									"description": "",
									"type": "text"
								},
								{
									"key": "lat",
									"value": "300",
									"description": "",
									"type": "text"
								},
								{
									"key": "type",
									"value": "ammo",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/api/marker",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"marker"
							]
						},
						"description": "Creates a new marker given long, lat, and type"
					},
					"response": []
				},
				{
					"name": "/api/log (3 users 1 loot 1 ammo)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6cd15141-d5fe-4059-ac2a-39847914a941",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Log fields exist\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('new');",
									"    pm.expect(jsonData.new).to.be.false;",
									"    pm.expect(jsonData).to.have.property('log');",
									"    pm.expect(jsonData.log).to.have.property('date');",
									"    pm.expect(jsonData.log).to.have.property('_id');",
									"    pm.expect(jsonData.log).to.have.property('users');",
									"    pm.expect(jsonData.log).to.have.property('loot');",
									"    pm.expect(jsonData.log).to.have.property('ammo');",
									"    pm.expect(jsonData.log).to.have.property('vmachine');",
									"    pm.expect(jsonData.log.users).to.eql(3);",
									"    pm.expect(jsonData.log.loot).to.eql(1);",
									"    pm.expect(jsonData.log.ammo).to.eql(1);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-access-token",
								"value": "{{admin.jwt}}"
							}
						],
						"body": {},
						"url": {
							"raw": "{{url}}/api/log",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"log"
							]
						},
						"description": "Retruns the sessions"
					},
					"response": []
				},
				{
					"name": "/api/marker/screenshot/:id (3rd screenshot - new)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b0fd6f60-d796-4a03-91c4-471fb9dfbc75",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Marker fields exist\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('coordinates');",
									"    pm.expect(jsonData.coordinates[0]).to.eql(200);",
									"    pm.expect(jsonData.coordinates[1]).to.eql(300);",
									"    pm.expect(jsonData).to.have.property('date');",
									"    pm.expect(jsonData).to.have.property('screenshot');",
									"    pm.expect(jsonData.screenshot.length).to.eql(1);",
									"    pm.expect(jsonData.screenshot[0]).to.eql(pm.globals.get(\"Screenshot3.id\"));",
									"    pm.expect(jsonData).to.have.property('clicks');",
									"    pm.expect(jsonData).to.have.property('reports');",
									"    pm.expect(jsonData).to.have.property('_id');",
									"    pm.expect(jsonData).to.have.property('type');",
									"    pm.expect(jsonData.type).to.eql('ammo');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "x-access-token",
								"value": "{{admin.jwt}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "long",
									"value": "200",
									"description": "",
									"type": "text"
								},
								{
									"key": "lat",
									"value": "300",
									"description": "",
									"type": "text"
								},
								{
									"key": "status",
									"value": "new",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/api/marker/screenshot/{{Screenshot3.id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"marker",
								"screenshot",
								"{{Screenshot3.id}}"
							]
						},
						"description": "Attaches the screenshot with the given id to the given marker"
					},
					"response": []
				},
				{
					"name": "/api/markers/lootchests/stats (Lootchests stats)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "43e803cf-ecde-4d5e-a1b9-5ccd0e8618de",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Stats fields exist\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('_id');",
									"    pm.expect(jsonData[0]._id).to.have.property('year');",
									"    pm.expect(jsonData[0]).to.have.property('monthlyusage');",
									"    pm.expect(jsonData[0].monthlyusage[0]).to.have.property('month');",
									"    pm.expect(jsonData[0].monthlyusage[0]).to.have.property('dailyusage');",
									"    pm.expect(jsonData[0].monthlyusage[0].dailyusage[0]).to.have.property('day');",
									"    pm.expect(jsonData[0].monthlyusage[0].dailyusage[0]).to.have.property('countLoot');",
									"    pm.expect(jsonData[0].monthlyusage[0].dailyusage[0].countLoot).to.eql(1);",
									"});",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-access-token",
								"value": "{{admin.jwt}}"
							}
						],
						"body": {},
						"url": {
							"raw": "{{url}}/api/markers/lootchests/stats",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"markers",
								"lootchests",
								"stats"
							]
						},
						"description": "Returns the lootchests stats"
					},
					"response": []
				},
				{
					"name": "/api/markers/ammocrates/stats (Ammo crates stats)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7ddc6550-0b65-4f4b-b6b6-c0b02b7a0d12",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Stats fields exist\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('_id');",
									"    pm.expect(jsonData[0]._id).to.have.property('year');",
									"    pm.expect(jsonData[0]).to.have.property('monthlyusage');",
									"    pm.expect(jsonData[0].monthlyusage[0]).to.have.property('month');",
									"    pm.expect(jsonData[0].monthlyusage[0]).to.have.property('dailyusage');",
									"    pm.expect(jsonData[0].monthlyusage[0].dailyusage[0]).to.have.property('day');",
									"    pm.expect(jsonData[0].monthlyusage[0].dailyusage[0]).to.have.property('countAmmo');",
									"    pm.expect(jsonData[0].monthlyusage[0].dailyusage[0].countAmmo).to.eql(1);",
									"});",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-access-token",
								"value": "{{admin.jwt}}"
							}
						],
						"body": {},
						"url": {
							"raw": "{{url}}/api/markers/ammocrates/stats",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"markers",
								"ammocrates",
								"stats"
							]
						},
						"description": "Returns the ammocrates stats"
					},
					"response": []
				},
				{
					"name": "/api/marker/types (Different marker types)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b20ba239-6c0a-418f-a194-65c0541b05c5",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Loot and Ammo types\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.eql('loot');",
									"    pm.expect(jsonData[1]).to.eql('ammo');",
									"});",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{url}}/api/marker/types",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"marker",
								"types"
							]
						},
						"description": "Returns the different marker types"
					},
					"response": []
				},
				{
					"name": "/api/marker/report (Not found)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ddf10ef8-ac8a-4d59-9f7f-9373198e3bb5",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Not found message\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql('Marker not found!');",
									"});",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "long",
									"value": "0",
									"description": "",
									"type": "text"
								},
								{
									"key": "lat",
									"value": "0",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/api/marker/report",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"marker",
								"report"
							]
						},
						"description": "Returns the marker that has been reported"
					},
					"response": []
				},
				{
					"name": "/api/marker/report (lng 100, lat 200)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e3a88b3b-c731-4772-8e83-fca5ecd12bdb",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Marker fields exist\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('coordinates');",
									"    pm.expect(jsonData.coordinates[0]).to.eql(100);",
									"    pm.expect(jsonData.coordinates[1]).to.eql(200);",
									"    pm.expect(jsonData).to.have.property('date');",
									"    pm.expect(jsonData).to.have.property('screenshot');",
									"    pm.expect(jsonData.screenshot.length).to.eql(2);",
									"    pm.expect(jsonData).to.have.property('clicks');",
									"    pm.expect(jsonData).to.have.property('reports');",
									"    pm.expect(jsonData.reports).to.eql(1);",
									"    pm.expect(jsonData).to.have.property('_id');",
									"    pm.expect(jsonData).to.have.property('type');",
									"    pm.expect(jsonData.type).to.eql('loot');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "long",
									"value": "100",
									"description": "",
									"type": "text"
								},
								{
									"key": "lat",
									"value": "200",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/api/marker/report",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"marker",
								"report"
							]
						},
						"description": "Returns the marker that has been reported"
					},
					"response": []
				},
				{
					"name": "/api/marker/report (lng 100, lat 200) Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "01c23f8d-ed74-4b8b-a9d9-073569e73b26",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Marker fields exist\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('coordinates');",
									"    pm.expect(jsonData.coordinates[0]).to.eql(100);",
									"    pm.expect(jsonData.coordinates[1]).to.eql(200);",
									"    pm.expect(jsonData).to.have.property('date');",
									"    pm.expect(jsonData).to.have.property('screenshot');",
									"    pm.expect(jsonData.screenshot.length).to.eql(2);",
									"    pm.expect(jsonData).to.have.property('clicks');",
									"    pm.expect(jsonData).to.have.property('reports');",
									"    pm.expect(jsonData.reports).to.eql(2);",
									"    pm.expect(jsonData).to.have.property('_id');",
									"    pm.expect(jsonData).to.have.property('type');",
									"    pm.expect(jsonData.type).to.eql('loot');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "long",
									"value": "100",
									"description": "",
									"type": "text"
								},
								{
									"key": "lat",
									"value": "200",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/api/marker/report",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"marker",
								"report"
							]
						},
						"description": "Returns the marker that has been reported"
					},
					"response": []
				},
				{
					"name": "/api/marker/report (lng 200, lat 300)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b8041ed3-a3e1-4d22-86b7-f8b43e9421f5",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Marker fields exist\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('coordinates');",
									"    pm.expect(jsonData.coordinates[0]).to.eql(200);",
									"    pm.expect(jsonData.coordinates[1]).to.eql(300);",
									"    pm.expect(jsonData).to.have.property('date');",
									"    pm.expect(jsonData).to.have.property('screenshot');",
									"    pm.expect(jsonData.screenshot.length).to.eql(1);",
									"    pm.expect(jsonData).to.have.property('clicks');",
									"    pm.expect(jsonData).to.have.property('reports');",
									"    pm.expect(jsonData.reports).to.eql(1);",
									"    pm.expect(jsonData).to.have.property('_id');",
									"    pm.expect(jsonData).to.have.property('type');",
									"    pm.expect(jsonData.type).to.eql('ammo');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "long",
									"value": "200",
									"description": "",
									"type": "text"
								},
								{
									"key": "lat",
									"value": "300",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/api/marker/report",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"marker",
								"report"
							]
						},
						"description": "Returns the marker that has been reported"
					},
					"response": []
				},
				{
					"name": "/api/marker/click (Not found)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ddf10ef8-ac8a-4d59-9f7f-9373198e3bb5",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Not found message\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql('Marker not found!');",
									"});",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "long",
									"value": "0",
									"description": "",
									"type": "text"
								},
								{
									"key": "lat",
									"value": "0",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/api/marker/click",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"marker",
								"click"
							]
						},
						"description": "Returns the marker that has been clicked"
					},
					"response": []
				},
				{
					"name": "/api/marker/click (lng 100, lat 200)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "05971cd0-9631-440b-afc8-903af8637ff0",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Marker fields exist\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('coordinates');",
									"    pm.expect(jsonData.coordinates[0]).to.eql(100);",
									"    pm.expect(jsonData.coordinates[1]).to.eql(200);",
									"    pm.expect(jsonData).to.have.property('date');",
									"    pm.expect(jsonData).to.have.property('screenshot');",
									"    pm.expect(jsonData.screenshot.length).to.eql(2);",
									"    pm.expect(jsonData).to.have.property('clicks');",
									"    pm.expect(jsonData.clicks).to.eql(1);",
									"    pm.expect(jsonData).to.have.property('reports');",
									"    pm.expect(jsonData).to.have.property('_id');",
									"    pm.expect(jsonData).to.have.property('type');",
									"    pm.expect(jsonData.type).to.eql('loot');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "long",
									"value": "100",
									"description": "",
									"type": "text"
								},
								{
									"key": "lat",
									"value": "200",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/api/marker/click",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"marker",
								"click"
							]
						},
						"description": "Returns the marker that has been clicked"
					},
					"response": []
				},
				{
					"name": "/api/marker/click (lng 100, lat 200) Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2b2a8b4c-24ca-4db3-848b-0605d2d310c5",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Marker fields exist\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('coordinates');",
									"    pm.expect(jsonData.coordinates[0]).to.eql(100);",
									"    pm.expect(jsonData.coordinates[1]).to.eql(200);",
									"    pm.expect(jsonData).to.have.property('date');",
									"    pm.expect(jsonData).to.have.property('screenshot');",
									"    pm.expect(jsonData.screenshot.length).to.eql(2);",
									"    pm.expect(jsonData).to.have.property('clicks');",
									"    pm.expect(jsonData.clicks).to.eql(2);",
									"    pm.expect(jsonData).to.have.property('reports');",
									"    pm.expect(jsonData).to.have.property('_id');",
									"    pm.expect(jsonData).to.have.property('type');",
									"    pm.expect(jsonData.type).to.eql('loot');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "long",
									"value": "100",
									"description": "",
									"type": "text"
								},
								{
									"key": "lat",
									"value": "200",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/api/marker/click",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"marker",
								"click"
							]
						},
						"description": "Returns the marker that has been clicked"
					},
					"response": []
				},
				{
					"name": "/api/marker/click (lng 200, lat 300)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "80d7c16f-04f7-48e6-a4b7-cbf1cb0000c9",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Marker fields exist\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('coordinates');",
									"    pm.expect(jsonData.coordinates[0]).to.eql(200);",
									"    pm.expect(jsonData.coordinates[1]).to.eql(300);",
									"    pm.expect(jsonData).to.have.property('date');",
									"    pm.expect(jsonData).to.have.property('screenshot');",
									"    pm.expect(jsonData.screenshot.length).to.eql(1);",
									"    pm.expect(jsonData).to.have.property('clicks');",
									"    pm.expect(jsonData.clicks).to.eql(1);",
									"    pm.expect(jsonData).to.have.property('reports');",
									"    pm.expect(jsonData).to.have.property('_id');",
									"    pm.expect(jsonData).to.have.property('type');",
									"    pm.expect(jsonData.type).to.eql('ammo');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "long",
									"value": "200",
									"description": "",
									"type": "text"
								},
								{
									"key": "lat",
									"value": "300",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/api/marker/click",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"marker",
								"click"
							]
						},
						"description": "Returns the marker that has been clicked"
					},
					"response": []
				},
				{
					"name": "/api/markers/report (Marker reports)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d0a3a17b-2daa-4179-8b1c-563e56e84859",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Marker fields exist\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('reports');",
									"    pm.expect(jsonData[1]).to.have.property('reports');",
									"    pm.expect(jsonData[0].reports).to.eql(2);",
									"    pm.expect(jsonData[1].reports).to.eql(1);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-access-token",
								"value": "{{admin.jwt}}"
							}
						],
						"body": {},
						"url": {
							"raw": "{{url}}/api/markers/report",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"markers",
								"report"
							]
						},
						"description": "Returns the reported markers sorted by reports field"
					},
					"response": []
				},
				{
					"name": "/api/markers/click (Marker clicks)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c9b6a49a-f0a8-45b3-923e-9551ab299867",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Marker fields exist\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('clicks');",
									"    pm.expect(jsonData[1]).to.have.property('clicks');",
									"    pm.expect(jsonData[0].reports).to.eql(2);",
									"    pm.expect(jsonData[1].reports).to.eql(1);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-access-token",
								"value": "{{admin.jwt}}"
							}
						],
						"body": {},
						"url": {
							"raw": "{{url}}/api/markers/click",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"markers",
								"click"
							]
						},
						"description": "Returns the clicked markers sorted by reports field"
					},
					"response": []
				},
				{
					"name": "/api/markers (Return the markers)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "045873a6-1410-4c4d-870d-f633507e6da9",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Marker fields exist\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(2);",
									"    pm.expect(jsonData[0]).to.have.property('coordinates');",
									"    pm.expect(jsonData[0].coordinates[0]).to.eql(100);",
									"    pm.expect(jsonData[0].coordinates[1]).to.eql(200);",
									"    pm.expect(jsonData[0]).to.have.property('date');",
									"    pm.expect(jsonData[0]).to.have.property('screenshot');",
									"    pm.expect(jsonData[0].screenshot.length).to.eql(2);",
									"    pm.expect(jsonData[0].screenshot[0]).to.eql(pm.globals.get(\"Screenshot1.id\"))",
									"    pm.expect(jsonData[0].screenshot[1]).to.eql(pm.globals.get(\"Screenshot2.id\"))",
									"",
									"    pm.expect(jsonData[0]).to.have.property('clicks');",
									"    pm.expect(jsonData[0].clicks).to.eql(2);",
									"    pm.expect(jsonData[0]).to.have.property('reports');",
									"    pm.expect(jsonData[0].reports).to.eql(2);",
									"    pm.expect(jsonData[0]).to.have.property('_id');",
									"    pm.expect(jsonData[0]).to.have.property('type');",
									"    pm.expect(jsonData[0].type).to.eql('loot');",
									"    ",
									"    pm.expect(jsonData[1]).to.have.property('coordinates');",
									"    pm.expect(jsonData[1].coordinates[0]).to.eql(200);",
									"    pm.expect(jsonData[1].coordinates[1]).to.eql(300);",
									"    pm.expect(jsonData[1]).to.have.property('date');",
									"    pm.expect(jsonData[1]).to.have.property('screenshot');",
									"    pm.expect(jsonData[1].screenshot.length).to.eql(1);",
									"    pm.expect(jsonData[1].screenshot[0]).to.eql(pm.globals.get(\"Screenshot3.id\"))",
									"",
									"    pm.expect(jsonData[1]).to.have.property('clicks');",
									"    pm.expect(jsonData[1].clicks).to.eql(1);",
									"    pm.expect(jsonData[1]).to.have.property('reports');",
									"    pm.expect(jsonData[1].reports).to.eql(1);",
									"    pm.expect(jsonData[1]).to.have.property('_id');",
									"    pm.expect(jsonData[1]).to.have.property('type');",
									"    pm.expect(jsonData[1].type).to.eql('ammo');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{url}}/api/markers",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"markers"
							]
						},
						"description": "Returns the markers"
					},
					"response": []
				},
				{
					"name": "/api/users/leaderboard (Users leaderboard)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b6275621-cefb-479e-a8c6-6da92a66c1ae",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Leaderboard fields exist\", function () {",
									"    var jsonData = pm.response.json();",
									"    var TestUsernameid = pm.globals.get(\"TestUsername.id\");",
									"    var TestUsername2id = pm.globals.get(\"TestUsername2.id\");",
									"    pm.expect(jsonData).to.have.property(TestUsernameid);",
									"    pm.expect(jsonData).to.have.property(TestUsername2id);",
									"    pm.expect(jsonData[TestUsernameid].score).to.eql(25);",
									"    pm.expect(jsonData[TestUsernameid].total).to.eql(2);",
									"    pm.expect(jsonData[TestUsernameid].newScreenshots).to.eql(1);",
									"    pm.expect(jsonData[TestUsername2id].score).to.eql(20);",
									"    pm.expect(jsonData[TestUsername2id].total).to.eql(1);",
									"    pm.expect(jsonData[TestUsername2id].newScreenshots).to.eql(1);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{url}}/api/users/leaderboard",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"users",
								"leaderboard"
							]
						},
						"description": "Returns the leaderboard"
					},
					"response": []
				},
				{
					"name": "/api/screenshot/:id (Delete first screenshot)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4fa357c8-9eb4-4240-a4bd-494ab39bf130",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Screenshot fields exist\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('date');",
									"    pm.expect(jsonData).to.have.property('status');",
									"    pm.expect(jsonData.status).to.eql('new');",
									"    pm.expect(jsonData).to.have.property('_id');",
									"    pm.expect(jsonData._id).to.eql(pm.globals.get(\"Screenshot1.id\"));",
									"    pm.expect(jsonData).to.have.property('author');",
									"    pm.expect(jsonData.author).to.eql(pm.globals.get(\"TestUsername.id\"));",
									"    pm.expect(jsonData).to.have.property('url');",
									"});",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-access-token",
								"value": "{{admin.jwt}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "",
									"value": "",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/api/screenshot/{{Screenshot1.id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"screenshot",
								"{{Screenshot1.id}}"
							]
						},
						"description": "Deletes the screenshot given his id and returns it"
					},
					"response": []
				},
				{
					"name": "/api/screenshot/:id (Check deleted 1st screenshot)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7dce36af-f177-499f-986c-9971e010e98e",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Screenshot not found message\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"Screenshot not found!\");",
									"});",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-access-token",
								"value": "{{TestUsername.jwt}}"
							}
						],
						"body": {},
						"url": {
							"raw": "{{url}}/api/screenshot/{{Screenshot1.id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"screenshot",
								"{{Screenshot1.id}}"
							]
						},
						"description": "Returns the screenshot information given his id"
					},
					"response": []
				},
				{
					"name": "/api/marker/:long/:lat (Delete [100,200] marker)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "13586c08-b4bb-4a6a-98c9-b9dd53efce60",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Marker fields exist\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('coordinates');",
									"    pm.expect(jsonData.coordinates[0]).to.eql(100);",
									"    pm.expect(jsonData.coordinates[1]).to.eql(200);",
									"    pm.expect(jsonData).to.have.property('date');",
									"    pm.expect(jsonData).to.have.property('screenshot');",
									"    pm.expect(jsonData.screenshot.length).to.eql(1);",
									"    pm.expect(jsonData.screenshot[0]).to.eql(pm.globals.get(\"Screenshot2.id\"));",
									"    pm.expect(jsonData).to.have.property('clicks');",
									"    pm.expect(jsonData.clicks).to.eql(2);",
									"    pm.expect(jsonData).to.have.property('reports');",
									"    pm.expect(jsonData.reports).to.eql(2);",
									"    pm.expect(jsonData).to.have.property('_id');",
									"    pm.expect(jsonData).to.have.property('type');",
									"    pm.expect(jsonData.type).to.eql('loot');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-access-token",
								"value": "{{admin.jwt}}"
							}
						],
						"body": {},
						"url": {
							"raw": "{{url}}/api/marker/100/200",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"marker",
								"100",
								"200"
							]
						},
						"description": "Deletes the marker given his long and lat"
					},
					"response": []
				},
				{
					"name": "/api/log (3 users 0 loot 1 ammo)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "99bb8d78-f194-4c73-9fca-191e7be51b02",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Log fields exist\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('new');",
									"    pm.expect(jsonData.new).to.be.false;",
									"    pm.expect(jsonData).to.have.property('log');",
									"    pm.expect(jsonData.log).to.have.property('date');",
									"    pm.expect(jsonData.log).to.have.property('_id');",
									"    pm.expect(jsonData.log).to.have.property('users');",
									"    pm.expect(jsonData.log).to.have.property('loot');",
									"    pm.expect(jsonData.log).to.have.property('ammo');",
									"    pm.expect(jsonData.log).to.have.property('vmachine');",
									"    pm.expect(jsonData.log.users).to.eql(3);",
									"    pm.expect(jsonData.log.loot).to.eql(0);",
									"    pm.expect(jsonData.log.ammo).to.eql(1);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-access-token",
								"value": "{{admin.jwt}}"
							}
						],
						"body": {},
						"url": {
							"raw": "{{url}}/api/log",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"log"
							]
						},
						"description": "Retruns the sessions"
					},
					"response": []
				},
				{
					"name": "/api/markers (Return the markers) Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1d731d87-95fc-4c37-a18f-3be54131d554",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Marker fields exist\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(1);",
									"    pm.expect(jsonData[0]).to.have.property('coordinates');",
									"    pm.expect(jsonData[0].coordinates[0]).to.eql(200);",
									"    pm.expect(jsonData[0].coordinates[1]).to.eql(300);",
									"    pm.expect(jsonData[0]).to.have.property('date');",
									"    pm.expect(jsonData[0]).to.have.property('screenshot');",
									"    pm.expect(jsonData[0].screenshot.length).to.eql(1);",
									"    pm.expect(jsonData[0].screenshot[0]).to.eql(pm.globals.get(\"Screenshot3.id\"))",
									"",
									"    pm.expect(jsonData[0]).to.have.property('clicks');",
									"    pm.expect(jsonData[0].clicks).to.eql(1);",
									"    pm.expect(jsonData[0]).to.have.property('reports');",
									"    pm.expect(jsonData[0].reports).to.eql(1);",
									"    pm.expect(jsonData[0]).to.have.property('_id');",
									"    pm.expect(jsonData[0]).to.have.property('type');",
									"    pm.expect(jsonData[0].type).to.eql('ammo');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{url}}/api/markers",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"markers"
							]
						},
						"description": "Returns the markers"
					},
					"response": []
				},
				{
					"name": "/api/users/leaderboard (Users leaderboard) Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "766f2c49-1cad-403c-9fe9-5398e985d26c",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Leaderboard fields exist\", function () {",
									"    var jsonData = pm.response.json();",
									"    var TestUsername2id = pm.globals.get(\"TestUsername2.id\");",
									"    pm.expect(jsonData).to.have.property(TestUsername2id);",
									"    pm.expect(jsonData[TestUsername2id].score).to.eql(20);",
									"    pm.expect(jsonData[TestUsername2id].total).to.eql(1);",
									"    pm.expect(jsonData[TestUsername2id].newScreenshots).to.eql(1);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{url}}/api/users/leaderboard",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"users",
								"leaderboard"
							]
						},
						"description": "Returns the leaderboard"
					},
					"response": []
				},
				{
					"name": "/api/user/:id (Deletes the second test user)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "33453bfd-a6a4-40c9-8add-8f2025a65c9c",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Screenshot not found message\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"User removed successfully!\");",
									"    pm.expect(jsonData).to.have.property('user');",
									"    pm.expect(jsonData.user).to.have.property('_id');",
									"    pm.expect(jsonData.user._id).to.eql(pm.globals.get(\"TestUsername2.id\"));",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-access-token",
								"value": "{{admin.jwt}}"
							}
						],
						"body": {},
						"url": {
							"raw": "{{url}}/api/user/{{TestUsername2.id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"user",
								"{{TestUsername2.id}}"
							]
						},
						"description": "Deletes an user given his id"
					},
					"response": []
				},
				{
					"name": "/api/log (2 users 0 loot 1 ammo)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8f946fdf-5642-452c-a453-3340c48a9962",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Log fields exist\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('new');",
									"    pm.expect(jsonData.new).to.be.false;",
									"    pm.expect(jsonData).to.have.property('log');",
									"    pm.expect(jsonData.log).to.have.property('date');",
									"    pm.expect(jsonData.log).to.have.property('_id');",
									"    pm.expect(jsonData.log).to.have.property('users');",
									"    pm.expect(jsonData.log).to.have.property('loot');",
									"    pm.expect(jsonData.log).to.have.property('ammo');",
									"    pm.expect(jsonData.log).to.have.property('vmachine');",
									"    pm.expect(jsonData.log.users).to.eql(2);",
									"    pm.expect(jsonData.log.loot).to.eql(0);",
									"    pm.expect(jsonData.log.ammo).to.eql(1);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-access-token",
								"value": "{{admin.jwt}}"
							}
						],
						"body": {},
						"url": {
							"raw": "{{url}}/api/log",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"log"
							]
						},
						"description": "Retruns the sessions"
					},
					"response": []
				},
				{
					"name": "/api/users (Array length == 2) Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fdfdfad0-28e4-4b07-b0c0-1b86e2d8416d",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Array length is equal to 2\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(2)",
									"    pm.expect(jsonData[1]._id).to.eql(pm.globals.get(\"TestUsername.id\"))",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-access-token",
								"value": "{{admin.jwt}}"
							}
						],
						"body": {},
						"url": {
							"raw": "{{url}}/api/users",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"users"
							]
						},
						"description": "Checks the array length is equal to 2 (admin and test users)"
					},
					"response": []
				},
				{
					"name": "/api/logs",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6d18d8a5-8dec-4f2c-aca5-289106a12868",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Logs fields exist\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('date');",
									"    pm.expect(jsonData.length).to.eql(1)",
									"    pm.expect(jsonData[0].users).to.eql(2);",
									"    pm.expect(jsonData[0].loot).to.eql(0);",
									"    pm.expect(jsonData[0].ammo).to.eql(1);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-access-token",
								"value": "{{admin.jwt}}"
							}
						],
						"body": {},
						"url": {
							"raw": "{{url}}/api/logs",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"logs"
							]
						},
						"description": "Retruns the logs"
					},
					"response": []
				},
				{
					"name": "/api/session",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7e726c06-da19-47e7-abed-dd115fd687c8",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Sessions fields exist\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('date');",
									"    pm.expect(jsonData).to.have.property('_id');",
									"    //pm.expect(jsonData).to.have.property('region');",
									"    //pm.expect(jsonData).to.have.property('country');",
									"    //pm.expect(jsonData).to.have.property('location');",
									"    pm.expect(jsonData).to.have.property('device');",
									"    pm.expect(jsonData).to.have.property('browser');",
									"    pm.expect(jsonData.browser).to.have.property('mobile');",
									"    //pm.expect(jsonData).to.have.property('ip');",
									"",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-access-token",
								"value": "{{admin.jwt}}"
							}
						],
						"body": {},
						"url": {
							"raw": "{{url}}/api/session",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"session"
							]
						},
						"description": "Retruns the sessions"
					},
					"response": []
				},
				{
					"name": "/api/sessions",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6fa0281e-dbe3-42fe-8189-3bb98e50ad07",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Sessions fields exist\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(1);",
									"    pm.expect(jsonData[0]).to.have.property('date');",
									"    pm.expect(jsonData[0]).to.have.property('_id');",
									"    //pm.expect(jsonData[0]).to.have.property('region');",
									"    //pm.expect(jsonData[0]).to.have.property('country');",
									"    //pm.expect(jsonData[0]).to.have.property('location');",
									"    pm.expect(jsonData[0]).to.have.property('device');",
									"    pm.expect(jsonData[0]).to.have.property('browser');",
									"    pm.expect(jsonData[0].browser).to.have.property('mobile');",
									"    //pm.expect(jsonData[0]).to.have.property('ip');",
									"",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-access-token",
								"value": "{{admin.jwt}}"
							}
						],
						"body": {},
						"url": {
							"raw": "{{url}}/api/sessions",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"sessions"
							]
						},
						"description": "Retruns the sessions"
					},
					"response": []
				},
				{
					"name": "/api/sessions/stats",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fdb35371-62bf-4a6e-942d-99cbac354601",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Sessions fields exist\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('_id');",
									"    pm.expect(jsonData[0]._id).to.have.property('year');",
									"    pm.expect(jsonData[0]).to.have.property('monthlyusage');",
									"    pm.expect(jsonData[0].monthlyusage[0]).to.have.property('month');",
									"    pm.expect(jsonData[0].monthlyusage[0]).to.have.property('dailyusage');",
									"    pm.expect(jsonData[0].monthlyusage[0].dailyusage[0]).to.have.property('day');",
									"    pm.expect(jsonData[0].monthlyusage[0].dailyusage[0]).to.have.property('count');",
									"    pm.expect(jsonData[0].monthlyusage[0].dailyusage[0].count).to.eql(1);",
									"});",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-access-token",
								"value": "{{admin.jwt}}"
							}
						],
						"body": {},
						"url": {
							"raw": "{{url}}/api/sessions/stats",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"sessions",
								"stats"
							]
						},
						"description": "Retruns the sessions stats"
					},
					"response": []
				},
				{
					"name": "/api/marker/:long/:lat (Delete [200,300] marker)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b331f0dc-e25e-413e-85fb-aa01eec59fcd",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Marker fields exist\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('coordinates');",
									"    pm.expect(jsonData.coordinates[0]).to.eql(200);",
									"    pm.expect(jsonData.coordinates[1]).to.eql(300);",
									"    pm.expect(jsonData).to.have.property('date');",
									"    pm.expect(jsonData).to.have.property('screenshot');",
									"    pm.expect(jsonData.screenshot.length).to.eql(1);",
									"    pm.expect(jsonData.screenshot[0]).to.eql(pm.globals.get(\"Screenshot3.id\"));",
									"    pm.expect(jsonData).to.have.property('clicks');",
									"    pm.expect(jsonData.clicks).to.eql(1);",
									"    pm.expect(jsonData).to.have.property('reports');",
									"    pm.expect(jsonData.reports).to.eql(1);",
									"    pm.expect(jsonData).to.have.property('_id');",
									"    pm.expect(jsonData).to.have.property('type');",
									"    pm.expect(jsonData.type).to.eql('ammo');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-access-token",
								"value": "{{admin.jwt}}"
							}
						],
						"body": {},
						"url": {
							"raw": "{{url}}/api/marker/200/300",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"marker",
								"200",
								"300"
							]
						},
						"description": "Deletes the marker given his long and lat"
					},
					"response": []
				},
				{
					"name": "/api/log (2 users 0 loot 0 ammo)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ef1a3c5f-0915-45a5-9f41-79293e84d0c4",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Log fields exist\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('new');",
									"    pm.expect(jsonData.new).to.be.false;",
									"    pm.expect(jsonData).to.have.property('log');",
									"    pm.expect(jsonData.log).to.have.property('date');",
									"    pm.expect(jsonData.log).to.have.property('_id');",
									"    pm.expect(jsonData.log).to.have.property('users');",
									"    pm.expect(jsonData.log).to.have.property('loot');",
									"    pm.expect(jsonData.log).to.have.property('ammo');",
									"    pm.expect(jsonData.log).to.have.property('vmachine');",
									"    pm.expect(jsonData.log.users).to.eql(2);",
									"    pm.expect(jsonData.log.loot).to.eql(0);",
									"    pm.expect(jsonData.log.ammo).to.eql(0);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-access-token",
								"value": "{{admin.jwt}}"
							}
						],
						"body": {},
						"url": {
							"raw": "{{url}}/api/log",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"log"
							]
						},
						"description": "Retruns the sessions"
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "feeef6a6-b08d-4886-b7a8-ad92abc9e074",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "b25a17f6-22df-4eff-aae9-e1eda9f9974d",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Weapons Management",
			"description": "",
			"item": [
				{
					"name": "/api/weapon (assault_rifle)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "43ba83ca-230f-40e1-9ea4-0e9342aed2e9",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Weapon fields exist\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"message\");",
									"    pm.expect(jsonData.message).to.eql(\"Weapon added successfully!\");",
									"    pm.expect(jsonData).to.have.property(\"weapon\");",
									"    pm.expect(jsonData.weapon).to.have.property(\"date\");",
									"    pm.expect(jsonData.weapon).to.have.property(\"_id\");",
									"    pm.globals.set(\"Weapon.id\", jsonData.weapon._id);",
									"    pm.expect(jsonData.weapon).to.have.property(\"ammocost\");",
									"    pm.expect(jsonData.weapon.ammocost).to.eql(1);",
									"    pm.expect(jsonData.weapon).to.have.property(\"damage\");",
									"    pm.expect(jsonData.weapon.damage).to.eql(1);",
									"    pm.expect(jsonData.weapon).to.have.property(\"dps\");",
									"    pm.expect(jsonData.weapon.dps).to.eql(1);",
									"    pm.expect(jsonData.weapon).to.have.property(\"durability\");",
									"    pm.expect(jsonData.weapon.durability).to.eql(\"inf\");",
									"    pm.expect(jsonData.weapon).to.have.property(\"firerate\");",
									"    pm.expect(jsonData.weapon.firerate).to.eql(1);",
									"    pm.expect(jsonData.weapon).to.have.property(\"headshotdamage\");",
									"    pm.expect(jsonData.weapon.headshotdamage).to.eql(1);",
									"    pm.expect(jsonData.weapon).to.have.property(\"impact\");",
									"    pm.expect(jsonData.weapon.impact).to.eql(1);",
									"    pm.expect(jsonData.weapon).to.have.property(\"magsize\");",
									"    pm.expect(jsonData.weapon.magsize).to.eql(1);",
									"    pm.expect(jsonData.weapon).to.have.property(\"name\");",
									"    pm.expect(jsonData.weapon.name).to.eql(\"TestWeapon\");",
									"    pm.expect(jsonData.weapon).to.have.property(\"range\");",
									"    pm.expect(jsonData.weapon.range).to.eql(1);",
									"    pm.expect(jsonData.weapon).to.have.property(\"rarity\");",
									"    pm.expect(jsonData.weapon.rarity).to.eql(\"legendary\");",
									"    pm.expect(jsonData.weapon).to.have.property(\"reloadtime\");",
									"    pm.expect(jsonData.weapon.reloadtime).to.eql(1);",
									"    pm.expect(jsonData.weapon).to.have.property(\"type\");",
									"    pm.expect(jsonData.weapon.type).to.eql(\"assault_rifle\");",
									"",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "x-access-token",
								"value": "{{admin.jwt}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "type",
									"value": "assault_rifle",
									"description": "",
									"type": "text"
								},
								{
									"key": "name",
									"value": "TestWeapon",
									"description": "",
									"type": "text"
								},
								{
									"key": "rarity",
									"value": "legendary",
									"description": "",
									"type": "text"
								},
								{
									"key": "dps",
									"value": "1",
									"description": "",
									"type": "text"
								},
								{
									"key": "damage",
									"value": "1",
									"description": "",
									"type": "text"
								},
								{
									"key": "headshotdamage",
									"value": "1",
									"description": "",
									"type": "text"
								},
								{
									"key": "firerate",
									"value": "1",
									"description": "",
									"type": "text"
								},
								{
									"key": "magsize",
									"value": "1",
									"description": "",
									"type": "text"
								},
								{
									"key": "range",
									"value": "1",
									"description": "",
									"type": "text"
								},
								{
									"key": "durability",
									"value": "inf",
									"description": "",
									"type": "text"
								},
								{
									"key": "reloadtime",
									"value": "1",
									"description": "",
									"type": "text"
								},
								{
									"key": "ammocost",
									"value": "1",
									"description": "",
									"type": "text"
								},
								{
									"key": "impact",
									"value": "1",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/api/weapon",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"weapon"
							]
						},
						"description": "Creates a weapon and returns it"
					},
					"response": []
				},
				{
					"name": "/api/weapon (sniper)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "74bee027-db06-4511-9487-13f118c05134",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Weapon fields exist\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"message\");",
									"    pm.expect(jsonData.message).to.eql(\"Weapon added successfully!\");",
									"    pm.expect(jsonData).to.have.property(\"weapon\");",
									"    pm.expect(jsonData.weapon).to.have.property(\"date\");",
									"    pm.expect(jsonData.weapon).to.have.property(\"_id\");",
									"    pm.expect(jsonData.weapon).to.have.property(\"ammocost\");",
									"    pm.expect(jsonData.weapon.ammocost).to.eql(1);",
									"    pm.expect(jsonData.weapon).to.have.property(\"damage\");",
									"    pm.expect(jsonData.weapon.damage).to.eql(1);",
									"    pm.expect(jsonData.weapon).to.have.property(\"dps\");",
									"    pm.expect(jsonData.weapon.dps).to.eql(1);",
									"    pm.expect(jsonData.weapon).to.have.property(\"durability\");",
									"    pm.expect(jsonData.weapon.durability).to.eql(\"inf\");",
									"    pm.expect(jsonData.weapon).to.have.property(\"firerate\");",
									"    pm.expect(jsonData.weapon.firerate).to.eql(1);",
									"    pm.expect(jsonData.weapon).to.have.property(\"headshotdamage\");",
									"    pm.expect(jsonData.weapon.headshotdamage).to.eql(1);",
									"    pm.expect(jsonData.weapon).to.have.property(\"impact\");",
									"    pm.expect(jsonData.weapon.impact).to.eql(1);",
									"    pm.expect(jsonData.weapon).to.have.property(\"magsize\");",
									"    pm.expect(jsonData.weapon.magsize).to.eql(1);",
									"    pm.expect(jsonData.weapon).to.have.property(\"name\");",
									"    pm.expect(jsonData.weapon.name).to.eql(\"TestWeapon\");",
									"    pm.expect(jsonData.weapon).to.have.property(\"range\");",
									"    pm.expect(jsonData.weapon.range).to.eql(1);",
									"    pm.expect(jsonData.weapon).to.have.property(\"rarity\");",
									"    pm.expect(jsonData.weapon.rarity).to.eql(\"legendary\");",
									"    pm.expect(jsonData.weapon).to.have.property(\"reloadtime\");",
									"    pm.expect(jsonData.weapon.reloadtime).to.eql(1);",
									"    pm.expect(jsonData.weapon).to.have.property(\"type\");",
									"    pm.expect(jsonData.weapon.type).to.eql(\"sniper\");",
									"",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "x-access-token",
								"value": "{{admin.jwt}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "type",
									"value": "sniper",
									"description": "",
									"type": "text"
								},
								{
									"key": "name",
									"value": "TestWeapon",
									"description": "",
									"type": "text"
								},
								{
									"key": "rarity",
									"value": "legendary",
									"description": "",
									"type": "text"
								},
								{
									"key": "dps",
									"value": "1",
									"description": "",
									"type": "text"
								},
								{
									"key": "damage",
									"value": "1",
									"description": "",
									"type": "text"
								},
								{
									"key": "headshotdamage",
									"value": "1",
									"description": "",
									"type": "text"
								},
								{
									"key": "firerate",
									"value": "1",
									"description": "",
									"type": "text"
								},
								{
									"key": "magsize",
									"value": "1",
									"description": "",
									"type": "text"
								},
								{
									"key": "range",
									"value": "1",
									"description": "",
									"type": "text"
								},
								{
									"key": "durability",
									"value": "inf",
									"description": "",
									"type": "text"
								},
								{
									"key": "reloadtime",
									"value": "1",
									"description": "",
									"type": "text"
								},
								{
									"key": "ammocost",
									"value": "1",
									"description": "",
									"type": "text"
								},
								{
									"key": "impact",
									"value": "1",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/api/weapon",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"weapon"
							]
						},
						"description": "Creates a weapon and returns it"
					},
					"response": []
				},
				{
					"name": "/api/weapon (shotgun)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "09d1c9cb-65ac-47ad-8536-e70e6ad51cc9",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Weapon fields exist\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"message\");",
									"    pm.expect(jsonData.message).to.eql(\"Weapon added successfully!\");",
									"    pm.expect(jsonData).to.have.property(\"weapon\");",
									"    pm.expect(jsonData.weapon).to.have.property(\"date\");",
									"    pm.expect(jsonData.weapon).to.have.property(\"_id\");",
									"    pm.expect(jsonData.weapon).to.have.property(\"ammocost\");",
									"    pm.expect(jsonData.weapon.ammocost).to.eql(1);",
									"    pm.expect(jsonData.weapon).to.have.property(\"damage\");",
									"    pm.expect(jsonData.weapon.damage).to.eql(1);",
									"    pm.expect(jsonData.weapon).to.have.property(\"dps\");",
									"    pm.expect(jsonData.weapon.dps).to.eql(1);",
									"    pm.expect(jsonData.weapon).to.have.property(\"durability\");",
									"    pm.expect(jsonData.weapon.durability).to.eql(\"inf\");",
									"    pm.expect(jsonData.weapon).to.have.property(\"firerate\");",
									"    pm.expect(jsonData.weapon.firerate).to.eql(1);",
									"    pm.expect(jsonData.weapon).to.have.property(\"headshotdamage\");",
									"    pm.expect(jsonData.weapon.headshotdamage).to.eql(1);",
									"    pm.expect(jsonData.weapon).to.have.property(\"impact\");",
									"    pm.expect(jsonData.weapon.impact).to.eql(1);",
									"    pm.expect(jsonData.weapon).to.have.property(\"magsize\");",
									"    pm.expect(jsonData.weapon.magsize).to.eql(1);",
									"    pm.expect(jsonData.weapon).to.have.property(\"name\");",
									"    pm.expect(jsonData.weapon.name).to.eql(\"TestWeapon\");",
									"    pm.expect(jsonData.weapon).to.have.property(\"range\");",
									"    pm.expect(jsonData.weapon.range).to.eql(1);",
									"    pm.expect(jsonData.weapon).to.have.property(\"rarity\");",
									"    pm.expect(jsonData.weapon.rarity).to.eql(\"legendary\");",
									"    pm.expect(jsonData.weapon).to.have.property(\"reloadtime\");",
									"    pm.expect(jsonData.weapon.reloadtime).to.eql(1);",
									"    pm.expect(jsonData.weapon).to.have.property(\"type\");",
									"    pm.expect(jsonData.weapon.type).to.eql(\"shotgun\");",
									"",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "x-access-token",
								"value": "{{admin.jwt}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "type",
									"value": "shotgun",
									"description": "",
									"type": "text"
								},
								{
									"key": "name",
									"value": "TestWeapon",
									"description": "",
									"type": "text"
								},
								{
									"key": "rarity",
									"value": "legendary",
									"description": "",
									"type": "text"
								},
								{
									"key": "dps",
									"value": "1",
									"description": "",
									"type": "text"
								},
								{
									"key": "damage",
									"value": "1",
									"description": "",
									"type": "text"
								},
								{
									"key": "headshotdamage",
									"value": "1",
									"description": "",
									"type": "text"
								},
								{
									"key": "firerate",
									"value": "1",
									"description": "",
									"type": "text"
								},
								{
									"key": "magsize",
									"value": "1",
									"description": "",
									"type": "text"
								},
								{
									"key": "range",
									"value": "1",
									"description": "",
									"type": "text"
								},
								{
									"key": "durability",
									"value": "inf",
									"description": "",
									"type": "text"
								},
								{
									"key": "reloadtime",
									"value": "1",
									"description": "",
									"type": "text"
								},
								{
									"key": "ammocost",
									"value": "1",
									"description": "",
									"type": "text"
								},
								{
									"key": "impact",
									"value": "1",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/api/weapon",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"weapon"
							]
						},
						"description": "Creates a weapon and returns it"
					},
					"response": []
				},
				{
					"name": "/api/weapon (submachine_gun)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b497d1d2-f5b2-4366-8792-07caeee0adc7",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Weapon fields exist\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"message\");",
									"    pm.expect(jsonData.message).to.eql(\"Weapon added successfully!\");",
									"    pm.expect(jsonData).to.have.property(\"weapon\");",
									"    pm.expect(jsonData.weapon).to.have.property(\"date\");",
									"    pm.expect(jsonData.weapon).to.have.property(\"_id\");",
									"    pm.expect(jsonData.weapon).to.have.property(\"ammocost\");",
									"    pm.expect(jsonData.weapon.ammocost).to.eql(1);",
									"    pm.expect(jsonData.weapon).to.have.property(\"damage\");",
									"    pm.expect(jsonData.weapon.damage).to.eql(1);",
									"    pm.expect(jsonData.weapon).to.have.property(\"dps\");",
									"    pm.expect(jsonData.weapon.dps).to.eql(1);",
									"    pm.expect(jsonData.weapon).to.have.property(\"durability\");",
									"    pm.expect(jsonData.weapon.durability).to.eql(\"inf\");",
									"    pm.expect(jsonData.weapon).to.have.property(\"firerate\");",
									"    pm.expect(jsonData.weapon.firerate).to.eql(1);",
									"    pm.expect(jsonData.weapon).to.have.property(\"headshotdamage\");",
									"    pm.expect(jsonData.weapon.headshotdamage).to.eql(1);",
									"    pm.expect(jsonData.weapon).to.have.property(\"impact\");",
									"    pm.expect(jsonData.weapon.impact).to.eql(1);",
									"    pm.expect(jsonData.weapon).to.have.property(\"magsize\");",
									"    pm.expect(jsonData.weapon.magsize).to.eql(1);",
									"    pm.expect(jsonData.weapon).to.have.property(\"name\");",
									"    pm.expect(jsonData.weapon.name).to.eql(\"TestWeapon\");",
									"    pm.expect(jsonData.weapon).to.have.property(\"range\");",
									"    pm.expect(jsonData.weapon.range).to.eql(1);",
									"    pm.expect(jsonData.weapon).to.have.property(\"rarity\");",
									"    pm.expect(jsonData.weapon.rarity).to.eql(\"legendary\");",
									"    pm.expect(jsonData.weapon).to.have.property(\"reloadtime\");",
									"    pm.expect(jsonData.weapon.reloadtime).to.eql(1);",
									"    pm.expect(jsonData.weapon).to.have.property(\"type\");",
									"    pm.expect(jsonData.weapon.type).to.eql(\"submachine_gun\");",
									"",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "x-access-token",
								"value": "{{admin.jwt}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "type",
									"value": "submachine_gun",
									"description": "",
									"type": "text"
								},
								{
									"key": "name",
									"value": "TestWeapon",
									"description": "",
									"type": "text"
								},
								{
									"key": "rarity",
									"value": "legendary",
									"description": "",
									"type": "text"
								},
								{
									"key": "dps",
									"value": "1",
									"description": "",
									"type": "text"
								},
								{
									"key": "damage",
									"value": "1",
									"description": "",
									"type": "text"
								},
								{
									"key": "headshotdamage",
									"value": "1",
									"description": "",
									"type": "text"
								},
								{
									"key": "firerate",
									"value": "1",
									"description": "",
									"type": "text"
								},
								{
									"key": "magsize",
									"value": "1",
									"description": "",
									"type": "text"
								},
								{
									"key": "range",
									"value": "1",
									"description": "",
									"type": "text"
								},
								{
									"key": "durability",
									"value": "inf",
									"description": "",
									"type": "text"
								},
								{
									"key": "reloadtime",
									"value": "1",
									"description": "",
									"type": "text"
								},
								{
									"key": "ammocost",
									"value": "1",
									"description": "",
									"type": "text"
								},
								{
									"key": "impact",
									"value": "1",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/api/weapon",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"weapon"
							]
						},
						"description": "Creates a weapon and returns it"
					},
					"response": []
				},
				{
					"name": "/api/weapon (pistol)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ddeb0230-9e28-4a31-9459-c5728868bead",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Weapon fields exist\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"message\");",
									"    pm.expect(jsonData.message).to.eql(\"Weapon added successfully!\");",
									"    pm.expect(jsonData).to.have.property(\"weapon\");",
									"    pm.expect(jsonData.weapon).to.have.property(\"date\");",
									"    pm.expect(jsonData.weapon).to.have.property(\"_id\");",
									"    pm.expect(jsonData.weapon).to.have.property(\"ammocost\");",
									"    pm.expect(jsonData.weapon.ammocost).to.eql(1);",
									"    pm.expect(jsonData.weapon).to.have.property(\"damage\");",
									"    pm.expect(jsonData.weapon.damage).to.eql(1);",
									"    pm.expect(jsonData.weapon).to.have.property(\"dps\");",
									"    pm.expect(jsonData.weapon.dps).to.eql(1);",
									"    pm.expect(jsonData.weapon).to.have.property(\"durability\");",
									"    pm.expect(jsonData.weapon.durability).to.eql(\"inf\");",
									"    pm.expect(jsonData.weapon).to.have.property(\"firerate\");",
									"    pm.expect(jsonData.weapon.firerate).to.eql(1);",
									"    pm.expect(jsonData.weapon).to.have.property(\"headshotdamage\");",
									"    pm.expect(jsonData.weapon.headshotdamage).to.eql(1);",
									"    pm.expect(jsonData.weapon).to.have.property(\"impact\");",
									"    pm.expect(jsonData.weapon.impact).to.eql(1);",
									"    pm.expect(jsonData.weapon).to.have.property(\"magsize\");",
									"    pm.expect(jsonData.weapon.magsize).to.eql(1);",
									"    pm.expect(jsonData.weapon).to.have.property(\"name\");",
									"    pm.expect(jsonData.weapon.name).to.eql(\"TestWeapon\");",
									"    pm.expect(jsonData.weapon).to.have.property(\"range\");",
									"    pm.expect(jsonData.weapon.range).to.eql(1);",
									"    pm.expect(jsonData.weapon).to.have.property(\"rarity\");",
									"    pm.expect(jsonData.weapon.rarity).to.eql(\"legendary\");",
									"    pm.expect(jsonData.weapon).to.have.property(\"reloadtime\");",
									"    pm.expect(jsonData.weapon.reloadtime).to.eql(1);",
									"    pm.expect(jsonData.weapon).to.have.property(\"type\");",
									"    pm.expect(jsonData.weapon.type).to.eql(\"pistol\");",
									"",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "x-access-token",
								"value": "{{admin.jwt}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "type",
									"value": "pistol",
									"description": "",
									"type": "text"
								},
								{
									"key": "name",
									"value": "TestWeapon",
									"description": "",
									"type": "text"
								},
								{
									"key": "rarity",
									"value": "legendary",
									"description": "",
									"type": "text"
								},
								{
									"key": "dps",
									"value": "1",
									"description": "",
									"type": "text"
								},
								{
									"key": "damage",
									"value": "1",
									"description": "",
									"type": "text"
								},
								{
									"key": "headshotdamage",
									"value": "1",
									"description": "",
									"type": "text"
								},
								{
									"key": "firerate",
									"value": "1",
									"description": "",
									"type": "text"
								},
								{
									"key": "magsize",
									"value": "1",
									"description": "",
									"type": "text"
								},
								{
									"key": "range",
									"value": "1",
									"description": "",
									"type": "text"
								},
								{
									"key": "durability",
									"value": "inf",
									"description": "",
									"type": "text"
								},
								{
									"key": "reloadtime",
									"value": "1",
									"description": "",
									"type": "text"
								},
								{
									"key": "ammocost",
									"value": "1",
									"description": "",
									"type": "text"
								},
								{
									"key": "impact",
									"value": "1",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/api/weapon",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"weapon"
							]
						},
						"description": "Creates a weapon and returns it"
					},
					"response": []
				},
				{
					"name": "/api/weapon (explosive)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a63f3ba6-201b-42fd-a131-a4b3b86c77e3",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Weapon fields exist\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"message\");",
									"    pm.expect(jsonData.message).to.eql(\"Weapon added successfully!\");",
									"    pm.expect(jsonData).to.have.property(\"weapon\");",
									"    pm.expect(jsonData.weapon).to.have.property(\"date\");",
									"    pm.expect(jsonData.weapon).to.have.property(\"_id\");",
									"    pm.expect(jsonData.weapon).to.have.property(\"ammocost\");",
									"    pm.expect(jsonData.weapon.ammocost).to.eql(1);",
									"    pm.expect(jsonData.weapon).to.have.property(\"damage\");",
									"    pm.expect(jsonData.weapon.damage).to.eql(1);",
									"    pm.expect(jsonData.weapon).to.have.property(\"dps\");",
									"    pm.expect(jsonData.weapon.dps).to.eql(1);",
									"    pm.expect(jsonData.weapon).to.have.property(\"durability\");",
									"    pm.expect(jsonData.weapon.durability).to.eql(\"inf\");",
									"    pm.expect(jsonData.weapon).to.have.property(\"firerate\");",
									"    pm.expect(jsonData.weapon.firerate).to.eql(1);",
									"    pm.expect(jsonData.weapon).to.have.property(\"headshotdamage\");",
									"    pm.expect(jsonData.weapon.headshotdamage).to.eql(1);",
									"    pm.expect(jsonData.weapon).to.have.property(\"impact\");",
									"    pm.expect(jsonData.weapon.impact).to.eql(1);",
									"    pm.expect(jsonData.weapon).to.have.property(\"magsize\");",
									"    pm.expect(jsonData.weapon.magsize).to.eql(1);",
									"    pm.expect(jsonData.weapon).to.have.property(\"name\");",
									"    pm.expect(jsonData.weapon.name).to.eql(\"TestWeapon\");",
									"    pm.expect(jsonData.weapon).to.have.property(\"range\");",
									"    pm.expect(jsonData.weapon.range).to.eql(1);",
									"    pm.expect(jsonData.weapon).to.have.property(\"rarity\");",
									"    pm.expect(jsonData.weapon.rarity).to.eql(\"legendary\");",
									"    pm.expect(jsonData.weapon).to.have.property(\"reloadtime\");",
									"    pm.expect(jsonData.weapon.reloadtime).to.eql(1);",
									"    pm.expect(jsonData.weapon).to.have.property(\"type\");",
									"    pm.expect(jsonData.weapon.type).to.eql(\"explosive\");",
									"",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "x-access-token",
								"value": "{{admin.jwt}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "type",
									"value": "explosive",
									"description": "",
									"type": "text"
								},
								{
									"key": "name",
									"value": "TestWeapon",
									"description": "",
									"type": "text"
								},
								{
									"key": "rarity",
									"value": "legendary",
									"description": "",
									"type": "text"
								},
								{
									"key": "dps",
									"value": "1",
									"description": "",
									"type": "text"
								},
								{
									"key": "damage",
									"value": "1",
									"description": "",
									"type": "text"
								},
								{
									"key": "headshotdamage",
									"value": "1",
									"description": "",
									"type": "text"
								},
								{
									"key": "firerate",
									"value": "1",
									"description": "",
									"type": "text"
								},
								{
									"key": "magsize",
									"value": "1",
									"description": "",
									"type": "text"
								},
								{
									"key": "range",
									"value": "1",
									"description": "",
									"type": "text"
								},
								{
									"key": "durability",
									"value": "inf",
									"description": "",
									"type": "text"
								},
								{
									"key": "reloadtime",
									"value": "1",
									"description": "",
									"type": "text"
								},
								{
									"key": "ammocost",
									"value": "1",
									"description": "",
									"type": "text"
								},
								{
									"key": "impact",
									"value": "1",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/api/weapon",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"weapon"
							]
						},
						"description": "Creates a weapon and returns it"
					},
					"response": []
				},
				{
					"name": "/api/weapons",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6254ed9b-b99b-460e-9517-54eb1d631e6f",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Array is equal to 6\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(6);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{url}}/api/weapons",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"weapons"
							]
						},
						"description": "Returns the entire weapons list"
					},
					"response": []
				},
				{
					"name": "/api/weapons/assault_rifles",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "def9dcf9-8cba-4589-8e12-3ef9a1aa786d",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Array is equal to 1\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(1);",
									"    pm.expect(jsonData[0].type).to.eql(\"assault_rifle\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{url}}/api/weapons/assault_rifles",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"weapons",
								"assault_rifles"
							]
						},
						"description": "Returns the entire assault rifles list"
					},
					"response": []
				},
				{
					"name": "/api/weapons/snipers",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9e4160cd-9e68-439c-a8b3-d6bbd946cfef",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Array is equal to 1\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(1);",
									"    pm.expect(jsonData[0].type).to.eql(\"sniper\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{url}}/api/weapons/snipers",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"weapons",
								"snipers"
							]
						},
						"description": "Returns the snipers list"
					},
					"response": []
				},
				{
					"name": "/api/weapons/shotguns",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d3ec4163-f007-4743-8baf-75cc2fe6a3e7",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Array is equal to 1\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(1);",
									"    pm.expect(jsonData[0].type).to.eql(\"shotgun\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{url}}/api/weapons/shotguns",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"weapons",
								"shotguns"
							]
						},
						"description": "Returns the shotguns list"
					},
					"response": []
				},
				{
					"name": "/api/weapons/submachine_guns",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d7beead3-30ef-47f7-9f37-35cc287e0342",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Array is equal to 1\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(1);",
									"    pm.expect(jsonData[0].type).to.eql(\"submachine_gun\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{url}}/api/weapons/submachine_guns",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"weapons",
								"submachine_guns"
							]
						},
						"description": "Returns the submachine guns list"
					},
					"response": []
				},
				{
					"name": "/api/weapons/pistols",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "33a44b7c-3929-4825-aa9f-e8e370128143",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Array is equal to 1\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(1);",
									"    pm.expect(jsonData[0].type).to.eql(\"pistol\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{url}}/api/weapons/pistols",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"weapons",
								"pistols"
							]
						},
						"description": "Returns the pistols list"
					},
					"response": []
				},
				{
					"name": "/api/weapons/explosives",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "eb12af3c-407c-4a99-a192-bb24882509e2",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Array is equal to 1\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(1);",
									"    pm.expect(jsonData[0].type).to.eql(\"explosive\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{url}}/api/weapons/explosives",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"weapons",
								"explosives"
							]
						},
						"description": "Returns the explosives list"
					},
					"response": []
				},
				{
					"name": "/api/weapon/:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f9a0a82e-275b-42b8-983c-ba8add32d7cd",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Weapon fields exist\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"message\");",
									"    pm.expect(jsonData.message).to.eql(\"Weapon removed successfully!\");",
									"    pm.expect(jsonData).to.have.property(\"weapon\");",
									"    pm.expect(jsonData.weapon).to.have.property(\"date\");",
									"    pm.expect(jsonData.weapon).to.have.property(\"_id\");",
									"    pm.globals.set(\"Weapon.id\", jsonData.weapon._id);",
									"    pm.expect(jsonData.weapon).to.have.property(\"ammocost\");",
									"    pm.expect(jsonData.weapon.ammocost).to.eql(1);",
									"    pm.expect(jsonData.weapon).to.have.property(\"damage\");",
									"    pm.expect(jsonData.weapon.damage).to.eql(1);",
									"    pm.expect(jsonData.weapon).to.have.property(\"dps\");",
									"    pm.expect(jsonData.weapon.dps).to.eql(1);",
									"    pm.expect(jsonData.weapon).to.have.property(\"durability\");",
									"    pm.expect(jsonData.weapon.durability).to.eql(\"inf\");",
									"    pm.expect(jsonData.weapon).to.have.property(\"firerate\");",
									"    pm.expect(jsonData.weapon.firerate).to.eql(1);",
									"    pm.expect(jsonData.weapon).to.have.property(\"headshotdamage\");",
									"    pm.expect(jsonData.weapon.headshotdamage).to.eql(1);",
									"    pm.expect(jsonData.weapon).to.have.property(\"impact\");",
									"    pm.expect(jsonData.weapon.impact).to.eql(1);",
									"    pm.expect(jsonData.weapon).to.have.property(\"magsize\");",
									"    pm.expect(jsonData.weapon.magsize).to.eql(1);",
									"    pm.expect(jsonData.weapon).to.have.property(\"name\");",
									"    pm.expect(jsonData.weapon.name).to.eql(\"TestWeapon\");",
									"    pm.expect(jsonData.weapon).to.have.property(\"range\");",
									"    pm.expect(jsonData.weapon.range).to.eql(1);",
									"    pm.expect(jsonData.weapon).to.have.property(\"rarity\");",
									"    pm.expect(jsonData.weapon.rarity).to.eql(\"legendary\");",
									"    pm.expect(jsonData.weapon).to.have.property(\"reloadtime\");",
									"    pm.expect(jsonData.weapon.reloadtime).to.eql(1);",
									"    pm.expect(jsonData.weapon).to.have.property(\"type\");",
									"    pm.expect(jsonData.weapon.type).to.eql(\"assault_rifle\");",
									"",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-access-token",
								"value": "{{admin.jwt}}"
							}
						],
						"body": {},
						"url": {
							"raw": "{{url}}/api/weapon/{{Weapon.id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"weapon",
								"{{Weapon.id}}"
							]
						},
						"description": "Deletes a weapon given his id and returns it"
					},
					"response": []
				},
				{
					"name": "/api/weapon/:id (Not found)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0d311361-3f30-4101-a9fe-055f9b7167d1",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Weapon fields exist\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"message\");",
									"    pm.expect(jsonData.message).to.eql(\"Weapon not found!\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-access-token",
								"value": "{{admin.jwt}}"
							}
						],
						"body": {},
						"url": {
							"raw": "{{url}}/api/weapon/{{Weapon.id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"weapon",
								"{{Weapon.id}}"
							]
						},
						"description": "Deletes a weapon given his id and returns it"
					},
					"response": []
				}
			]
		},
		{
			"name": "Test Authorization Layer",
			"description": "",
			"item": [
				{
					"name": "Trying access with no token",
					"description": "",
					"item": [
						{
							"name": "/api/users",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3634388d-89e2-4dc0-8da8-2f8c643a28c6",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {},
								"url": {
									"raw": "{{url}}/api/users",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"users"
									]
								},
								"description": "This request gets the user list"
							},
							"response": []
						},
						{
							"name": "/api/user/block",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "514025ae-2b14-4e4e-9fe2-f19c6941cecc",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {},
								"url": {
									"raw": "{{url}}/api/user/block",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"user",
										"block"
									]
								},
								"description": "Block the user setting his confirmed field to false"
							},
							"response": []
						},
						{
							"name": "/api/user/unblock",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "514025ae-2b14-4e4e-9fe2-f19c6941cecc",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {},
								"url": {
									"raw": "{{url}}/api/user/unblock",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"user",
										"unblock"
									]
								},
								"description": "Block the user setting his confirmed field to false"
							},
							"response": []
						},
						{
							"name": "/api/user/:id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "514025ae-2b14-4e4e-9fe2-f19c6941cecc",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {},
								"url": {
									"raw": "{{url}}/api/user/id",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"user",
										"id"
									]
								},
								"description": "Block the user setting his confirmed field to false"
							},
							"response": []
						},
						{
							"name": "/api/users/stats",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "54b202f6-3295-424b-9892-0d5e2c97a71c",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "x-access-token",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "username",
											"value": "Javier",
											"description": "",
											"type": "text"
										},
										{
											"key": "password",
											"value": "1231231",
											"description": "",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{url}}/api/users/stats",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"users",
										"stats"
									]
								},
								"description": "This request authenticates the user and provides him with a JWT."
							},
							"response": []
						},
						{
							"name": "/api/marker",
							"request": {
								"method": "POST",
								"header": [],
								"body": {},
								"url": {
									"raw": "{{url}}/api/marker",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"marker"
									]
								}
							},
							"response": []
						},
						{
							"name": "/api/marker/:long/:lat",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "514025ae-2b14-4e4e-9fe2-f19c6941cecc",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {},
								"url": {
									"raw": "{{url}}/api/marker/123/123",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"marker",
										"123",
										"123"
									]
								},
								"description": "Block the user setting his confirmed field to false"
							},
							"response": []
						},
						{
							"name": "/api/markers/report",
							"request": {
								"method": "GET",
								"header": [],
								"body": {},
								"url": {
									"raw": "{{url}}/api/markers/report",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"markers",
										"report"
									]
								}
							},
							"response": []
						},
						{
							"name": "/api/marker/screenshot/:id",
							"request": {
								"method": "POST",
								"header": [],
								"body": {},
								"url": {
									"raw": "{{url}}/api/marker/screenshot/123",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"marker",
										"screenshot",
										"123"
									]
								}
							},
							"response": []
						},
						{
							"name": "/api/markers/lootchests/stats",
							"request": {
								"method": "GET",
								"header": [],
								"body": {},
								"url": {
									"raw": "{{url}}/api/markers/lootchests/stats",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"markers",
										"lootchests",
										"stats"
									]
								}
							},
							"response": []
						},
						{
							"name": "/api/markers/ammocrates/stats",
							"request": {
								"method": "GET",
								"header": [],
								"body": {},
								"url": {
									"raw": "{{url}}/api/markers/ammocrates/stats",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"markers",
										"ammocrates",
										"stats"
									]
								}
							},
							"response": []
						},
						{
							"name": "/api/screenshot/:id",
							"request": {
								"method": "GET",
								"header": [],
								"body": {},
								"url": {
									"raw": "{{url}}/api/screenshot/123",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"screenshot",
										"123"
									]
								}
							},
							"response": []
						},
						{
							"name": "/api/screenshot",
							"request": {
								"method": "POST",
								"header": [],
								"body": {},
								"url": {
									"raw": "{{url}}/api/screenshot",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"screenshot"
									]
								}
							},
							"response": []
						},
						{
							"name": "/api/screenshots/author/:id",
							"request": {
								"method": "GET",
								"header": [],
								"body": {},
								"url": {
									"raw": "{{url}}/api/screenshots/author/123",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"screenshots",
										"author",
										"123"
									]
								}
							},
							"response": []
						},
						{
							"name": "/api/screenshots/pending",
							"request": {
								"method": "GET",
								"header": [],
								"body": {},
								"url": {
									"raw": "{{url}}/api/screenshots/pending",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"screenshots",
										"pending"
									]
								}
							},
							"response": []
						},
						{
							"name": "/api/screenshot/:id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "514025ae-2b14-4e4e-9fe2-f19c6941cecc",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {},
								"url": {
									"raw": "{{url}}/api/screenshot/123",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"screenshot",
										"123"
									]
								},
								"description": "Block the user setting his confirmed field to false"
							},
							"response": []
						},
						{
							"name": "/api/weapon",
							"request": {
								"method": "POST",
								"header": [],
								"body": {},
								"url": {
									"raw": "{{url}}/api/weapon",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"weapon"
									]
								}
							},
							"response": []
						},
						{
							"name": "/api/weapon/:id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "514025ae-2b14-4e4e-9fe2-f19c6941cecc",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {},
								"url": {
									"raw": "{{url}}/api/weapon/123",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"weapon",
										"123"
									]
								},
								"description": "Block the user setting his confirmed field to false"
							},
							"response": []
						},
						{
							"name": "/api/logs",
							"request": {
								"method": "GET",
								"header": [],
								"body": {},
								"url": {
									"raw": "{{url}}/api/logs",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"logs"
									]
								}
							},
							"response": []
						},
						{
							"name": "/api/sessions",
							"request": {
								"method": "GET",
								"header": [],
								"body": {},
								"url": {
									"raw": "{{url}}/api/sessions",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"sessions"
									]
								}
							},
							"response": []
						},
						{
							"name": "/api/sessions/stats",
							"request": {
								"method": "GET",
								"header": [],
								"body": {},
								"url": {
									"raw": "{{url}}/api/sessions/stats",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"sessions",
										"stats"
									]
								}
							},
							"response": []
						},
						{
							"name": "/api/matching",
							"request": {
								"method": "POST",
								"header": [],
								"body": {},
								"url": {
									"raw": "{{url}}/api/matching",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"matching"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9255789b-be49-4ded-8b80-1a8db77efa73",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "c17403e2-51a9-42e9-94ce-82275b16b1d5",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"JSON contains success and not token provided field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.eql(false);",
									"    pm.expect(jsonData.message).to.eql(\"No token provided\");",
									"});",
									"",
									"pm.test(\"response must be forbidden and have a body\", function () {",
									"     pm.response.to.be.forbidden",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json;",
									"});"
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Trying access admin api with user token",
					"description": "",
					"item": [
						{
							"name": "/api/users",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3634388d-89e2-4dc0-8da8-2f8c643a28c6",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-access-token",
										"value": "{{TestUsername.jwt}}"
									}
								],
								"body": {},
								"url": {
									"raw": "{{url}}/api/users",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"users"
									]
								},
								"description": "This request gets the user list"
							},
							"response": []
						},
						{
							"name": "/api/user/block",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "514025ae-2b14-4e4e-9fe2-f19c6941cecc",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "x-access-token",
										"value": "{{TestUsername.jwt}}"
									}
								],
								"body": {},
								"url": {
									"raw": "{{url}}/api/user/block",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"user",
										"block"
									]
								},
								"description": "Block the user setting his confirmed field to false"
							},
							"response": []
						},
						{
							"name": "/api/user/unblock",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "514025ae-2b14-4e4e-9fe2-f19c6941cecc",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "x-access-token",
										"value": "{{TestUsername.jwt}}"
									}
								],
								"body": {},
								"url": {
									"raw": "{{url}}/api/user/unblock",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"user",
										"unblock"
									]
								},
								"description": "Block the user setting his confirmed field to false"
							},
							"response": []
						},
						{
							"name": "/api/user/:id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "514025ae-2b14-4e4e-9fe2-f19c6941cecc",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-access-token",
										"value": "{{TestUsername.jwt}}"
									}
								],
								"body": {},
								"url": {
									"raw": "{{url}}/api/user/id",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"user",
										"id"
									]
								},
								"description": "Block the user setting his confirmed field to false"
							},
							"response": []
						},
						{
							"name": "/api/users/stats",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "54b202f6-3295-424b-9892-0d5e2c97a71c",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "x-access-token",
										"value": "{{TestUsername.jwt}}"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "username",
											"value": "Javier",
											"description": "",
											"type": "text"
										},
										{
											"key": "password",
											"value": "1231231",
											"description": "",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{url}}/api/users/stats",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"users",
										"stats"
									]
								},
								"description": "This request authenticates the user and provides him with a JWT."
							},
							"response": []
						},
						{
							"name": "/api/marker",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-access-token",
										"value": "{{TestUsername.jwt}}"
									}
								],
								"body": {},
								"url": {
									"raw": "{{url}}/api/marker",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"marker"
									]
								}
							},
							"response": []
						},
						{
							"name": "/api/marker/:long/:lat",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "514025ae-2b14-4e4e-9fe2-f19c6941cecc",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-access-token",
										"value": "{{TestUsername.jwt}}"
									}
								],
								"body": {},
								"url": {
									"raw": "{{url}}/api/marker/123/123",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"marker",
										"123",
										"123"
									]
								},
								"description": "Block the user setting his confirmed field to false"
							},
							"response": []
						},
						{
							"name": "/api/markers/report",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-access-token",
										"value": "{{TestUsername.jwt}}"
									}
								],
								"body": {},
								"url": {
									"raw": "{{url}}/api/markers/report",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"markers",
										"report"
									]
								}
							},
							"response": []
						},
						{
							"name": "/api/marker/screenshot/:id",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-access-token",
										"value": "{{TestUsername.jwt}}"
									}
								],
								"body": {},
								"url": {
									"raw": "{{url}}/api/marker/screenshot/123",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"marker",
										"screenshot",
										"123"
									]
								}
							},
							"response": []
						},
						{
							"name": "/api/markers/lootchests/stats",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-access-token",
										"value": "{{TestUsername.jwt}}"
									}
								],
								"body": {},
								"url": {
									"raw": "{{url}}/api/markers/lootchests/stats",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"markers",
										"lootchests",
										"stats"
									]
								}
							},
							"response": []
						},
						{
							"name": "/api/markers/ammocrates/stats",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-access-token",
										"value": "{{TestUsername.jwt}}"
									}
								],
								"body": {},
								"url": {
									"raw": "{{url}}/api/markers/ammocrates/stats",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"markers",
										"ammocrates",
										"stats"
									]
								}
							},
							"response": []
						},
						{
							"name": "/api/screenshots/pending",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-access-token",
										"value": "{{TestUsername.jwt}}"
									}
								],
								"body": {},
								"url": {
									"raw": "{{url}}/api/screenshots/pending",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"screenshots",
										"pending"
									]
								}
							},
							"response": []
						},
						{
							"name": "/api/screenshot/:id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "514025ae-2b14-4e4e-9fe2-f19c6941cecc",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-access-token",
										"value": "{{TestUsername.jwt}}"
									}
								],
								"body": {},
								"url": {
									"raw": "{{url}}/api/screenshot/123",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"screenshot",
										"123"
									]
								},
								"description": "Block the user setting his confirmed field to false"
							},
							"response": []
						},
						{
							"name": "/api/weapon",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-access-token",
										"value": "{{TestUsername.jwt}}"
									}
								],
								"body": {},
								"url": {
									"raw": "{{url}}/api/weapon",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"weapon"
									]
								}
							},
							"response": []
						},
						{
							"name": "/api/weapon/:id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "514025ae-2b14-4e4e-9fe2-f19c6941cecc",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-access-token",
										"value": "{{TestUsername.jwt}}"
									}
								],
								"body": {},
								"url": {
									"raw": "{{url}}/api/weapon/123",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"weapon",
										"123"
									]
								},
								"description": "Block the user setting his confirmed field to false"
							},
							"response": []
						},
						{
							"name": "/api/logs",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-access-token",
										"value": "{{TestUsername.jwt}}"
									}
								],
								"body": {},
								"url": {
									"raw": "{{url}}/api/logs",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"logs"
									]
								}
							},
							"response": []
						},
						{
							"name": "/api/sessions",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-access-token",
										"value": "{{TestUsername.jwt}}"
									}
								],
								"body": {},
								"url": {
									"raw": "{{url}}/api/sessions",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"sessions"
									]
								}
							},
							"response": []
						},
						{
							"name": "/api/sessions/stats",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-access-token",
										"value": "{{TestUsername.jwt}}"
									}
								],
								"body": {},
								"url": {
									"raw": "{{url}}/api/sessions/stats",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"sessions",
										"stats"
									]
								}
							},
							"response": []
						},
						{
							"name": "/api/matching",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-access-token",
										"value": "{{TestUsername.jwt}}"
									}
								],
								"body": {},
								"url": {
									"raw": "{{url}}/api/matching",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"matching"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9255789b-be49-4ded-8b80-1a8db77efa73",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "c17403e2-51a9-42e9-94ce-82275b16b1d5",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"JSON contains success and not token provided field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.eql(false);",
									"    pm.expect(jsonData.message).to.eql(\"Unauthorized\");",
									"});",
									"",
									"pm.test(\"response must be forbidden and have a body\", function () {",
									"     pm.response.to.be.forbidden",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json;",
									"});"
								]
							}
						}
					],
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "5d112b54-5bd6-4494-bd93-8d1bab458572",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "c1119e06-01e3-4808-932c-d8c232aa8c0a",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "API Limiter",
			"description": "",
			"item": [
				{
					"name": "/api/users",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ab69a46c-879f-4f3f-839a-967d54aa87f3",
								"type": "text/javascript",
								"exec": [
									"if ( responseCode.code === 403 ) {",
									"    pm.test(\"Status code is 403\", function () {",
									"        pm.response.to.have.status(403);",
									"        pm.expect(pm.response.text()).to.include(\"No token provided\");",
									"    });",
									"}",
									"else if ( responseCode.code !== 403 ) {",
									"    pm.response.to.have.body(\"Too many requests, please try again later.\");",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{url}}/api/users",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}